/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 9.1.1. Prepare Request Duplicate Check (incl. Transfers, Quotes, Bulk Transfers, Bulk Quotes)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-source" as TOPIC_SOURCE
control "Processing\nHandler" as HANDLER
collections "topic-event" as TOPIC_EVENTS
collections "topic-notifcation" as TOPIC_NOTIFICATION
entity "Request DAO" as DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_SOURCE
    participant HANDLER
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant DAO
    participant DB
end box

' start flow
activate HANDLER

note right of HANDLER #lightgrey
    Processing Handler here refers to the
    entry point where the request is received
end note

group Security Check
    |||
    HANDLER -> TOPIC_EVENTS: Produce message
    ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
    |||
end

group Schema Validation (joi)
    |||
    HANDLER -> TOPIC_EVENTS: Produce message
    ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
    |||
end

note right of HANDLER #lightgrey
    Processing Handler onwards refers to the corresponding
    Handler where duplicate checking is executed (e.g. 
    PrepareHandler, BulkPrepareHandler, etc.)
end note

group Request Duplicate Check
    TOPIC_SOURCE <- HANDLER: Consume message
    activate TOPIC_SOURCE
    deactivate TOPIC_SOURCE

    group UUID Check
        HANDLER -> DAO: Query hash by id\n<color #red><b>Error code:</b> 2003</color>
        activate DAO
        note right of DAO #lightgrey
            //request// keyword to be replaced by
            **transfer**, **bulkTransfer** or other
            depending on the referencing 
            sequence diagram
        end note
        DAO -> DB: getHashById
        hnote over DB #lightyellow
            //request//DuplicateCheck
        end note
        activate DB
        DB --> DAO: Return **hashRecord**
        deactivate DB
        DAO --> HANDLER: Return **hashRecord**
        deactivate DAO
    end
    
    HANDLER -> HANDLER: Generate **currentMessageHash**
    |||
    
    alt hashRecord EXISTS
        group Hash Mismatch
            opt currentMessageHash != hashRecord.hash
                HANDLER -> TOPIC_EVENTS: Produce message
                ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
                HANDLER -> TOPIC_NOTIFICATION: Produce message\n<color #red><b>Error code:</b> 3106 - Modified Request</color>
                activate TOPIC_NOTIFICATION
                deactivate TOPIC_NOTIFICATION
            end
        end
        |||

        group Resend Handling
            opt currentMessageHash == hashRecord.hash
                |||
                ref over HANDLER, TOPIC_NOTIFICATION: \tApply specific **getMethod** to report **currentState**\t\t\n
                alt currentState === //inProgress//
                    note right of HANDLER #lightgrey
                        Ignore this request and allow the ongoing 
                        request to complete with a callback
                    end note
                else Previous reqest has completed
                    HANDLER -> TOPIC_NOTIFICATION: Produce GET callback notification
                    activate TOPIC_NOTIFICATION
                    deactivate TOPIC_NOTIFICATION
                end
            end
        end
        |||

    else hashRecord NOT FOUND
        group Process Request
            HANDLER -> DAO: Persist request hash \n<color #FF0000><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: Persist **currentMessageHash**
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                //request//DuplicateCheck
            end note
            DAO --> HANDLER: Return success
            deactivate DAO
            |||
            ref over HANDLER, TOPIC_NOTIFICATION: Execute **specific processing** (Quote, Bulk or Transfer Prepare)\noutside of a DB transaction (insert all records which pass DB\nintegrity constraints and ignore non-successful inserts)\n
        end
    end
end

@enduml
