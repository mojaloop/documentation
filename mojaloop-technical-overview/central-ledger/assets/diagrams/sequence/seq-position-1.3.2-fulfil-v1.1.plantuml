/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Rajiv Mothilal <rajiv.mothilal@modusbox.com>
 * Miguel de Barros <miguel.debarros@modusbox.com>
 * Valentin Genev <valentin.genev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 1.3.2. Fulfil Position Handler Consume v1.1

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Handler" as POS_HANDLER
collections "Notifications-Topic" as TOPIC_NOTIFICATIONS
entity "Position Facade" as POS_FACADE
entity "Position DAO" as POS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant POS_HANDLER
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    participant POS_FACADE
    participant DB
end box

' start flow
activate POS_HANDLER
group Fulfil Position Handler Consume
    POS_HANDLER -> POS_DAO: Request current state of transfer from DB \n<color #FF0000><b>Error code:</b> 2003</color>
    activate POS_DAO
    POS_DAO -> DB: Retrieve current state of transfer from DB
    activate DB
    hnote over DB #lightyellow
        transferStateChange
        transferParticipant
    end note
    DB --> POS_DAO: Return current state of transfer from DB
    deactivate DB
    POS_DAO --> POS_HANDLER: Return current state of transfer from DB
    deactivate POS_DAO
    POS_HANDLER <-> POS_HANDLER: Validate current state (transferState is 'RECEIVED-FULFIL')\n<color #FF0000><b>Error code:</b> 2001</color>
    group Persist Position change and Transfer State (with transferState='COMMITTED' on position check pass)
        POS_HANDLER -> POS_FACADE: Request to persist latest position and state to DB\n<color #FF0000><b>Error code:</b> 2003</color>
        group <color #blue>DB TRANSACTION</color>
            activate POS_FACADE
            POS_FACADE -> DB: Select participantPosition.value FOR UPDATE from DB for Payee
            activate DB
            hnote over DB #lightyellow
                participantPosition
            end note
            DB --> POS_FACADE: Return participantPosition.value from DB for Payee
            deactivate DB
            POS_FACADE <-> POS_FACADE: **latestPosition** = participantPosition.value - payload.amount.amount
            POS_FACADE->DB: Persist latestPosition to DB for Payee
            hnote over DB #lightyellow
                UPDATE **participantPosition**
                SET value = latestPosition
            end note
            activate DB
            deactivate DB
            POS_FACADE -> DB: Persist transfer state and participant position change
            hnote over DB #lightyellow
                    INSERT **transferStateChange** transferStateId = 'COMMITTED'

                    INSERT **participantPositionChange**
                    SET participantPositionId = participantPosition.participantPositionId,
                    transferStateChangeId = transferStateChange.transferStateChangeId,
                    value = latestPosition,
                    reservedValue = participantPosition.reservedValue
                    createdDate = new Date()
            end note
            activate DB
            deactivate DB
            deactivate POS_DAO
        end
        POS_FACADE --> POS_HANDLER: Return success
        deactivate POS_FACADE
    end

    note right of POS_HANDLER #yellow
        Message:
        {
            id: <transferMessage.transferId>
            from: <transferMessage.payerFsp>,
            to: <transferMessage.payeeFsp>,
            type: application/json
            content: {
                headers: <transferHeaders>,
                payload: <transferMessage>
            },
            metadata: {
                event: {
                    id: <uuid>,
                    responseTo: <previous.uuid>,
                    type: transfer,
                    action: commit || reserve,
                    createdAt: <timestamp>,
                    state: {
                        status: "success",
                        code: 0
                    }
                }
            }
        }
    end note
    POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Transfer event\n<color #FF0000><b>Error code:</b> 2003</color>
    activate TOPIC_NOTIFICATIONS
    deactivate TOPIC_NOTIFICATIONS
end
deactivate POS_HANDLER
@enduml
