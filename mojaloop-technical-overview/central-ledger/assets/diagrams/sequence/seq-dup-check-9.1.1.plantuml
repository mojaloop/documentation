/'*****
 License
 --------------
 Copyright © 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 9.1.1. Request Duplicate Check (incl. Transfers, Quotes, Bulk Transfers, Bulk Quotes)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-source" as TOPIC_SOURCE
control "Processing\nHandler" as HANDLER
collections "topic-event" as TOPIC_EVENTS
collections "topic-notifcation" as TOPIC_NOTIFICATION
entity "Request DAO" as DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_SOURCE
    participant HANDLER
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant DAO
    participant DB
end box

' start flow
group Security Check
    |||
    HANDLER -> TOPIC_EVENTS: Produce message
    ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
    |||
end

group Schema Validation (joi)
    |||
    HANDLER -> TOPIC_EVENTS: Produce message
    ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
    |||
end

activate HANDLER
group Request Duplicate Check
    TOPIC_SOURCE <- HANDLER: Consume message
    activate TOPIC_SOURCE
    deactivate TOPIC_SOURCE

    group UUID Check
        alt request.method == 'POST'
            HANDLER -> DAO: Query hash by id\n<color #red><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: getHashById
            hnote over DB #lightyellow
                requestDuplicateCheck
            end note
            activate DB
            DB --> DAO: Return **hashRecord**
            deactivate DB
            DAO --> HANDLER: Return **hashRecord**
            deactivate DAO
        else request.method == 'PUT'
            HANDLER -> DAO: Query hash by id and source\n<color #red><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: getHashByIdSource
            hnote over DB #lightyellow
                responseDuplicateCheck
            end note
            activate DB
            DB --> DAO: Return **hashRecord**
            deactivate DB
            DAO --> HANDLER: Return **hashRecord**
            deactivate DAO
        end
    end
    |||
    alt hashRecord EXISTS
        group Hash Mismatch
            HANDLER -> HANDLER: Generate **currentMessageHash**
            opt currentMessageHash != hashRecord.hash
                HANDLER -> TOPIC_EVENTS: Produce message
                ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
                HANDLER -> TOPIC_NOTIFICATION: Produce message\n<color #red><b>Error code:</b> 3106 - Modified Request</color>
            end
        end
        |||

        opt currentMessageHash == hashRecord.hash
            note right of HANDLER #lightgrey
                Resend Handling
            end note

            group Error Check
                HANDLER -> DAO: Query completed requests by uuid, requestType [and source]\n<color #red><b>Error code:</b> 2003</color>
                activate DAO
                DAO -> DB: getCompletedRequest
                hnote over DB #lightyellow
                    completedRequest
                end note
                activate DB
                DB --> DAO: Return **crRecord**
                deactivate DB
                DAO --> HANDLER: Return **crRecord**
                deactivate DAO

                opt crRecord && crRecord.errorCode IS NOT NULL
                    note right of HANDLER #lightgrey
                        An error occured during previous processing
                    end note
                    HANDLER -> TOPIC_NOTIFICATION: Produce message\n<color #red><b>Error code:</b> 3xxx / 4xxx / 5xxx</color>\n<color #red>Client / Payer / Payee Error</color>
                end
            end
            |||

            group Completed Check
                alt crRecord && crRecord.errorCode IS NULL
                    note right of HANDLER #lightgrey
                        Previous message processing has completed successfully
                    end note
                    ref over HANDLER, TOPIC_NOTIFICATION: \tUse specific **getMethod** to reply with current state\t\t\n
                    HANDLER -> TOPIC_NOTIFICATION: Produce message
                else crRecord NOT EXISTS
                    note right of HANDLER #lightgrey
                        Ignore resend and leave the initial request
                        to complete with a callback
                    end note
                end
            end
        end
        |||
    else hashRecord NOT EXISTS
        group Process Request
            |||
            ref over HANDLER, TOPIC_NOTIFICATION: Execute **specific processing**:\t\t\t\t\t\nTransfer/Quote/Bulk Prepare/Fulfil\n

            note right of HANDLER #lightgrey
                let errorCode = null
                let errorDescription = null
            end note

            opt errorOccured
                note right of HANDLER #lightgrey
                    let errorCode = <3xxx/4xxx/5xxx>
                    let errorDescription = <text>
                end note
                HANDLER -> TOPIC_EVENTS: Produce message
                ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
            end

            HANDLER -> DAO: Store processing result\n<color #red><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: Insert completedRequest
            hnote over DB #lightyellow
                completedRequest
            end note
            activate DB
            deactivate DB
            DAO --> HANDLER: Return success
            deactivate DAO

            HANDLER -> TOPIC_NOTIFICATION: Produce message
            activate TOPIC_NOTIFICATION
            deactivate TOPIC_NOTIFICATION
        end
    end
    |||

    note right of HANDLER #lightgrey
        √ Performance wise for success scenarios, just one extra step has been added (the insert to completedRequest).
           The addition of source for responses/fulfils comes at no extra cost;
        √ Hash check remains unchanged for POSTs and improved for PUTs;
        √ For the resend scenarios there is not only performance gain, but also improved handling
           to fix current inconsistencies;
        — <color #red>(TBD)</color> completedRequest may be replaced by completedTransferRequest,
           completedQuoteRequest, completedBulkTransferRequest, completedBulkQuoteRequest
           if necessary, also avoiding the need for requestType lookup table.
    end note
    |||
end

@enduml
