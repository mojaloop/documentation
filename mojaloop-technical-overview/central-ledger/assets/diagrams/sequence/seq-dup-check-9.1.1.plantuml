/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 9.1.1. Request Duplicate Check (incl. Transfers, Quotes, Bulk Transfers, Transactions)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-source" as TOPIC_SOURCE
control "Processing\nHandler" as HANDLER
collections "topic-event" as TOPIC_EVENTS
collections "topic-notifcation" as TOPIC_NOTIFICATION
entity "Request DAO" as DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_SOURCE
    participant HANDLER
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant DAO
    participant DB
end box

' start flow
group Security Check
    |||
    HANDLER -> TOPIC_EVENTS: Produce message
    ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
    |||
end

group Schema Validation (joi)
    |||
    HANDLER -> TOPIC_EVENTS: Produce message
    ref over HANDLER, TOPIC_EVENTS: Event Handler Consume\n
    |||
end

note right of HANDLER #lightgrey
    Onwards, each unique (by source)
    request would leave its footprint
end note

activate HANDLER
group Request Duplicate Check
    TOPIC_SOURCE <- HANDLER: Consume message
    activate TOPIC_SOURCE
    deactivate TOPIC_SOURCE

    group Idempotency Check
        note right of HANDLER #lightgrey
            Source qualified, each (unique) POST/PUT message is
            processed //exactly once//, except when requestStatus is GET
        end note

        HANDLER -> DAO: Save request with status RECEIVED\n<color #red><b>Error code:</b> 2003</color>
        activate DAO
        DAO -> DB: Insert utilising unique index\non source, uuid, hash
        hnote over DB #lightyellow
            request
        end note
        activate DB
        deactivate DB
        DAO --> HANDLER: Return requestId or insert failure
        deactivate DAO

        break Insert failed
            HANDLER -> DAO: Retrieve duplicate request\n<color #red><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: Use same index:\n source, uuid, hash
            hnote over DB #lightyellow
                request
            end note
            activate DB
            DB --> DAO: Return **requestInfo**
            deactivate DB
            DAO --> HANDLER: Return **requestInfo**
            deactivate DAO

            alt requestStatus IN ['RECEIVED', 'ACCEPTED']
                note right of HANDLER #lightgrey
                    Ignore request
                end note
            else requestStatus IN ['UUID_COLLISION', 'MODIFIED', 'INVALID', 'ERROR', 'COMPLETED']
                HANDLER -> TOPIC_NOTIFICATION: Produce previous response\nusing stored **requestInfo**
                activate TOPIC_NOTIFICATION
                deactivate TOPIC_NOTIFICATION
            else requestStatus IN ['GET']
                ref over HANDLER, TOPIC_NOTIFICATION: \t\tUse specific **getMethod** to reply with current state\t\n
                HANDLER -> TOPIC_NOTIFICATION: Produce message
            end
        end
    end
    |||

    group UUID Check
        note right of HANDLER #lightgrey
            Request is currently RECEIVED, but we need to verify
            by querying db for other records with same UUID.
            **Note**: uuid uniqueness is not guaranteed across
            different request types.
        end note

        HANDLER -> DAO: Find matching UUIDs (excl. current)\n<color #red><b>Error code:</b> 2003</color>
        activate DAO
        DAO -> DB: Use index: uuid,\nrequestType, isFulfil
        hnote over DB #lightyellow
            request
        end note
        activate DB
        DB --> DAO: Return **requestsInfo**
        deactivate DB
        DAO --> HANDLER: Return **requestsInfo**
        deactivate DAO

        note right of HANDLER #lightgrey
            **isUniqueUuid** = requestsInfo.length == 0
        end note

        opt isUniqueUuid == true
            HANDLER -> DAO: Change request status to ACCEPTED\n<color #red><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: Update status
            hnote over DB #lightyellow
                request
            end note
            activate DB
            deactivate DB
            DAO --> HANDLER: Return success
            deactivate DAO
        end
    end
    |||

    group Modified Request Check
        note right of HANDLER #lightgrey
            Request is still RECEIVED and **UUID Check** failed
        end note
        opt isUniqueUuid == false
            break
                note right of HANDLER #lightgrey
                    **sourceMatched** = false 
                end note

                loop foreach request in requestsInfo
                    opt currentRequest.source == request.source
                        note right of HANDLER #lightgrey
                            **sourceMatched** = true
                        end note
                    end
                end

                alt sourceMatched == true
                    note right of HANDLER #lightgrey
                        **requestStatus** = 'MODIFIED'
                    end note
                else sourceMatched == false
                    note right of HANDLER #lightgrey
                        **requestStatus** = 'UUID_COLLISION'
                    end note
                end

                HANDLER -> DAO: Store response and **requestStatus**\n<color #red><b>Error code:</b> 2003</color>
                activate DAO
                DAO -> DB: Update responsePayload,\nresponseHeaders and\nrequestStatus
                hnote over DB #lightyellow
                    request
                end note
                activate DB
                deactivate DB
                DAO --> HANDLER: Return success
                deactivate DAO

                HANDLER -> TOPIC_NOTIFICATION: Produce message
                activate TOPIC_NOTIFICATION
                deactivate TOPIC_NOTIFICATION
            end
        end
    end
    |||

    group Invalid Request Check
        note right of HANDLER #lightgrey
            Request is ACCEPTED
        end note

        ref over HANDLER, TOPIC_NOTIFICATION: \tUse specific **requestValidationMethod**\t\t\n\tor **fulfilValidationMethod** to validate\n

        opt validationFailed == true
            break
                HANDLER -> DAO: Store response and requestStatus = 'INVALID'\n<color #red><b>Error code:</b> 2003</color>
                activate DAO
                DAO -> DB: Update responsePayload,\nresponseHeaders and\nrequestStatus
                hnote over DB #lightyellow
                    request
                end note
                activate DB
                deactivate DB
                DAO --> HANDLER: Return success
                deactivate DAO

                HANDLER -> TOPIC_NOTIFICATION: Produce message
                activate TOPIC_NOTIFICATION
                deactivate TOPIC_NOTIFICATION
            end
        end
    end
    |||

    group Complete Request
        note right of HANDLER #lightgrey
            Request remained in ACCEPTED state
        end note

        ref over HANDLER, TOPIC_NOTIFICATION: Execute specific processing:\t\t\t\t\nTransfer/Quote/Bulk Prepare/Fulfil\n

        note right of HANDLER #lightgrey
            **requestStatus** = null
            **responseHeaders** = null
            **responsePayload** = null
        end note


        alt static response
            alt success
                note right of HANDLER #lightgrey
                    **requestStatus** = 'COMPLETED'
                    **responseHeaders** = <content.headers>
                    **responsePayload** = <content.payload>
                end note
            else error
                note right of HANDLER #lightgrey
                    **requestStatus** = 'ERROR'
                    **responseHeaders** = <content.headers>
                    **responsePayload** = <content.payload.errorInformation>
                end note
            end

            HANDLER -> TOPIC_NOTIFICATION: Produce message
            activate TOPIC_NOTIFICATION
            deactivate TOPIC_NOTIFICATION
        else non-static response
            note right of HANDLER #lightgrey
                **requestStatus** = 'GET'
            end note
            ref over HANDLER, TOPIC_NOTIFICATION: \t\tUse specific **getMethod** to reply with current state\t\n
            HANDLER -> TOPIC_NOTIFICATION: Produce message
        end

        HANDLER -> DAO: <color #red>Store requestStatus and response (not set when GET)</color>\n<color #red><b>Error code:</b> 2003</color>
        activate DAO
        DAO -> DB: Update responsePayload,\nresponseHeaders and\nrequestStatus
        hnote over DB #lightyellow
            request
        end note
        activate DB
        deactivate DB
        DAO --> HANDLER: Return success
        deactivate DAO
    end
    |||
    
    note right of HANDLER #lightgrey
        â Order is performance optimised
        â request.isFulfil replaces additional lookup or doubling the count of requestTypes
        â request.destination provides for fulfil request validation (destination should match when isFulfil == true)
        â <color #red>(TBD)</color> Unique and regular indexes are used for performance during check, BUT may delay operations
        â <color #red>(TBD)</color> Status update and store response may cost resources, BUT no await or following notification?
        â <color #red>(TBD)</color> Saved response provides processing exactly once, but storage and security may be affected
        â <color #red>(TBD)</color> requestType.methods provide easy configuration for custom processing according to request type
    end note
    |||
end

@enduml
