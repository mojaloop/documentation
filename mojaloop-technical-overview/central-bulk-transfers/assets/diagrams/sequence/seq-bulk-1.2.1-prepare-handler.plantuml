/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Miguel de Barros <miguel.debarros@modusbox.com>
 * Rajiv Mothilal <rajiv.mothilal@modusbox.com>
 * Samuel Kummary <sam@modusbox.com>
 * Shashikant Hirugade <shashikant.hirugade@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 1.2.1. Prepare Handler Consume individual transfers from Bulk

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-\ntransfer-prepare" as TOPIC_TRANSFER_PREPARE
control "Prepare Handler" as PREP_HANDLER
collections "topic-\ntransfer-position" as TOPIC_TRANSFER_POSITION
collections "topic-\nbulk-processing" as TOPIC_BULK_PROCESSING
collections "topic-\nevent" as TOPIC_EVENTS
collections "topic-\nnotification" as TOPIC_NOTIFICATIONS
entity "Position DAO" as POS_DAO
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_TRANSFER_PREPARE
    participant PREP_HANDLER
    participant TOPIC_TRANSFER_POSITION
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant TOPIC_BULK_PROCESSING
    participant POS_DAO
    participant PARTICIPANT_DAO
    participant DB
end box

' start flow
activate PREP_HANDLER
group Prepare Handler Consume
    TOPIC_TRANSFER_PREPARE <- PREP_HANDLER: Consume Prepare event message
    activate TOPIC_TRANSFER_PREPARE
    deactivate TOPIC_TRANSFER_PREPARE

    break
        group Validate Event
            PREP_HANDLER <-> PREP_HANDLER: Validate event - Rule: type == 'prepare' && action == 'bulk-prepare'\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
    end

    group Persist Event Information
        |||
        PREP_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over PREP_HANDLER, TOPIC_EVENTS :  Event Handler Consume\n
        |||
    end

    group Validate Prepare Transfer 
        PREP_HANDLER <-> PREP_HANDLER: <color #gray>Schema validation of the incoming message</color>
        PREP_HANDLER <-> PREP_HANDLER: <color #gray>Verify the message's signature (to be confirmed in future requirement)</color>

        group Validate Duplicate Check
            |||
            PREP_HANDLER -> DB: Request Duplicate Check
            ref over PREP_HANDLER, DB:  Request Duplicate Check\n
            DB --> PREP_HANDLER: Return { hasDuplicateId: Boolean, hasDuplicateHash: Boolean }
        end

        alt hasDuplicateId == TRUE && hasDuplicateHash == TRUE
            note right of PREP_HANDLER #lightgrey
                In the context of a bulk (when compared to regular transfers), duplicate
                individual transfers are now considered and reported with Modified Request,
                because they could have already been handled for another bulk.
            end note
            break
                note right of PREP_HANDLER #yellow
                    {
                        id: <messageId>
                        from: <ledgerName>,
                        to: <payerFspName>,
                        type: "application/json",
                        content: {
                            headers: <transferHeaders>,
                            payload: {
                                errorInformation: {
                                    errorCode: "3106",
                                    errorDescription: "Modified request - Individual transfer prepare duplicate",
                                    extensionList: { extension: [ { key: "_cause", value: <FSPIOPError> } ] }
                                }
                            },
                            uriParams: { id: <transferId> }
                        },
                        metadata: {
                            correlationId: <uuid>,
                            event: {
                                type: "bulk-processing",
                                action: "prepare-duplicate",
                                createdAt: <timestamp>,
                                state: {
                                    code: "3106",
                                    status: "error",
                                    description: "Modified request - Individual transfer prepare duplicate"
                                },
                                id: <uuid>,
                                responseTo: <uuid>
                            }
                        }
                end note
                PREP_HANDLER -> TOPIC_BULK_PROCESSING: Publish Processing (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate TOPIC_BULK_PROCESSING
                deactivate TOPIC_BULK_PROCESSING
            end
        else hasDuplicateId == TRUE && hasDuplicateHash == FALSE
            break
                note right of PREP_HANDLER #yellow
                    {
                        id: <messageId>
                        from: <ledgerName>,
                        to: <payerFspName>,
                        type: "application/json",
                        content: {
                            headers: <transferHeaders>,
                            payload: {
                                errorInformation: {
                                    errorCode: "3106",
                                    errorDescription: "Modified request",
                                    extensionList: { extension: [ { key: "_cause", value: <FSPIOPError> } ] }
                                }
                            },
                            uriParams: { id: <transferId> }
                        },
                        metadata: {
                            correlationId: <uuid>,
                            event: {
                                type: "bulk-processing",
                                action: "prepare-duplicate",
                                createdAt: <timestamp>,
                                state: {
                                    code: "3106",
                                    status: "error",
                                    description: "Modified request"
                                },
                                id: <uuid>,
                                responseTo: <uuid>
                            }
                        }
                end note
                PREP_HANDLER -> TOPIC_BULK_PROCESSING: Publish Processing (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate TOPIC_BULK_PROCESSING
                deactivate TOPIC_BULK_PROCESSING
            end
        else hasDuplicateId == FALSE
            note right of PREP_HANDLER #lightgrey
                The validation of Payer, Payee can be skipped for individual transfers in Bulk
                as they should've/would've been validated already in the bulk prepare part.
                However, leaving it here for now, as in the future, this can be leveraged
                when bulk transfers to multiple Payees are supported by the Specification.
            end note
            group Validate Payer
                PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payer Participant details (if it exists)
                activate PARTICIPANT_DAO
                PARTICIPANT_DAO -> DB: Request Participant details
                hnote over DB #lightyellow
                    participant
                    participantCurrency
                end note
                activate DB
                PARTICIPANT_DAO <-- DB: Return Participant details if it exists
                deactivate DB
                PARTICIPANT_DAO --> PREP_HANDLER: Return Participant details if it exists
                deactivate PARTICIPANT_DAO
                PREP_HANDLER <-> PREP_HANDLER: Validate Payer\n<color #FF0000><b>Error codes:</b> 3202</color>
            end
            group Validate Payee
                PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payee Participant details (if it exists)
                activate PARTICIPANT_DAO
                PARTICIPANT_DAO -> DB: Request Participant details
                hnote over DB #lightyellow
                    participant
                    participantCurrency
                end note
                activate DB
                PARTICIPANT_DAO <-- DB: Return Participant details if it exists
                deactivate DB
                PARTICIPANT_DAO --> PREP_HANDLER: Return Participant details if it exists
                deactivate PARTICIPANT_DAO
                PREP_HANDLER <-> PREP_HANDLER: Validate Payee\n<color #FF0000><b>Error codes:</b> 3203</color>
            end
            
            alt Validate Prepare Transfer (success)
                group Persist Transfer State (with transferState='RECEIVED-PREPARE')
                    PREP_HANDLER -> POS_DAO: Request to persist transfer\n<color #FF0000><b>Error codes:</b> 2003</color>
                    activate POS_DAO
                    POS_DAO -> DB: Persist transfer
                    hnote over DB #lightyellow
                        transfer
                        transferParticipant
                        transferStateChange
                        transferExtension
                        ilpPacket
                    end note
                    activate DB
                    deactivate DB
                    POS_DAO --> PREP_HANDLER: Return success
                    deactivate POS_DAO
                end
            else Validate Prepare Transfer (failure)
                group Persist Transfer State (with transferState='INVALID') (Introducing a new status INVALID to mark these entries)
                    PREP_HANDLER -> POS_DAO: Request to persist transfer\n(when Payee/Payer/crypto-condition validation fails)\n<color #FF0000><b>Error codes:</b> 2003</color>
                    activate POS_DAO
                    POS_DAO -> DB: Persist transfer
                    hnote over DB #lightyellow
                        transfer
                        transferParticipant
                        transferStateChange
                        transferExtension
                        transferError
                        ilpPacket
                    end note
                    activate DB
                    deactivate DB
                    POS_DAO --> PREP_HANDLER: Return success
                    deactivate POS_DAO
                end
            end
        end
    end

    alt Validate Prepare Transfer (success)
        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <messageId>
                from: <payerFspName>,
                to: <payeeFspName>,
                type: "application/json",
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: "position",
                        action: "bulk-prepare",
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0,
                            description:"action successful"
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_TRANSFER_POSITION: Route & Publish Position event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
    else Validate Prepare Transfer (failure)
        note right of PREP_HANDLER #yellow
            Message:
            {
                id: <messageId>
                from: <ledgerName>,
                to: <payerFspName>,
                type: "application/json"
                content: {
                    headers: <transferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": <possible codes: [2003, 3100, 3105, 3106, 3202, 3203, 3300, 3301]>
                            "errorDescription": "<refer to section 35.1.3 for description>",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: "bulk-processing",
                        action: "prepare",
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        PREP_HANDLER -> TOPIC_BULK_PROCESSING: Publish Prepare failure event to Bulk Processing Topic (for Payer) \n<color #FF0000><b>Error codes:</b> 2003</color>
    end
end

deactivate PREP_HANDLER
@enduml

