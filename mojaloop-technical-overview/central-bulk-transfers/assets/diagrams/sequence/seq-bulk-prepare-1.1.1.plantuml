/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Samuel Kummary <sam@modusbox.com>
 --------------
 ******'/

@startuml
' declare title
title 1.1.1. Bulk Prepare Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-\nbulk-prepare" as TOPIC_BULK_PREPARE
control "Bulk Prepare \nHandler" as BULK_PREP_HANDLER
collections "topic-\ntransfer-prepare" as TOPIC_TRANSFER_PREPARE
collections "topic-event" as TOPIC_EVENTS
collections "topic-\nbulk-processing" as TOPIC_BULK_PROCESSING
collections "topic-\nnotification" as TOPIC_NOTIFICATIONS
entity "Position DAO" as POS_DAO
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_BULK_PREPARE
    participant BULK_PREP_HANDLER
    participant TOPIC_TRANSFER_PREPARE
    participant TOPIC_EVENTS
    participant TOPIC_BULK_PROCESSING
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    participant PARTICIPANT_DAO
    participant DB
end box

' start flow
activate BULK_PREP_HANDLER
group Bulk Prepare Handler Consume
    TOPIC_BULK_PREPARE <- BULK_PREP_HANDLER: Consume Bulk Prepare message
    activate TOPIC_BULK_PREPARE
    deactivate TOPIC_BULK_PREPARE

    break
        group Validate Event
            BULK_PREP_HANDLER <-> BULK_PREP_HANDLER: Validate event - Rule: type == 'bulk-prepare' && action == 'bulk-prepare'\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
    end

    group Persist Event Information
        |||
        BULK_PREP_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over BULK_PREP_HANDLER, TOPIC_EVENTS :  Event Handler Consume {[[https://github.com/mojaloop/docs/blob/master/CentralServices/seq_diagrams/seq-event-9.1.0.svg 9.1.0]]} \n
        |||
    end

    group Validate Bulk Prepare Transfer 
        BULK_PREP_HANDLER <-> BULK_PREP_HANDLER: <color #AAA>Schema validation of the incoming message</color>
        BULK_PREP_HANDLER <-> BULK_PREP_HANDLER: <color #AAA>Verify the message's signature (to be confirmed in future requirement)</color>
        note right of BULK_PREP_HANDLER #lightgrey
            The above validation steps are already handled by
            the ML-Adapter for the open source implementation.
            It may need to be added in future for custom adapters.
        end note
        group Validate Duplicate check
            note right of BULK_PREP_HANDLER #Cyan
                The Specification doesn't touch on the duplicate handling
                of bulk transfers, so the current design mostly follows the
                strategy used for individual transfers, except in two places.
                For duplicate requests where hash matches, the current design
                includes only the status of the bulk & timestamp (if completed),
                but not the individual transfers (for which a GET should be used).

                For duplicate requests where hash matches but are not in a
                finalized state, only the state of the bulkTransfer is sent.
            end note
            BULK_PREP_HANDLER -> POS_DAO: Request to retrieve Hash for a bulkTransferId
            activate POS_DAO
            POS_DAO -> DB: Request Transfer Hash for a bulkTransferId
            activate DB
            hnote over DB #lightyellow
                bulkTransferDuplicateCheck
            end note
            POS_DAO <-- DB: Return hash if it exists
            deactivate DB
            BULK_PREP_HANDLER <-- POS_DAO: Return hash if it exists
            deactivate POS_DAO

            alt If bulkTransferId exists
                group Persist Event Information
                    |||
                    BULK_PREP_HANDLER -> TOPIC_EVENTS: Publish event information
                    ref over BULK_PREP_HANDLER, TOPIC_EVENTS :  Event Handler Consume {[[https://github.com/mojaloop/docs/blob/master/CentralServices/seq_diagrams/seq-event-9.1.0.svg 9.1.0]]} \n
                    |||
                end
                BULK_PREP_HANDLER -> BULK_PREP_HANDLER: Generate Hash for the incoming message \nand compare hashes

                alt BulkTransfer exists, hash matches    
                    BULK_PREP_HANDLER -> POS_DAO: Request to retrieve Bulk Transfer state \n<color #FF0000><b>Error code:</b> 2003</color>
                    activate POS_DAO
                    POS_DAO -> DB: Request BulkTransfer state
                    hnote over DB #lightyellow
                        bulkTransfer
                        bulkTransferStateChange
                    end note
                    activate DB
                    POS_DAO <-- DB: Return Transfer state
                    deactivate DB
                    POS_DAO --> BULK_PREP_HANDLER: Return Transfer state
                    deactivate POS_DAO
                    break
                        alt If bulkTransferState IN ['COMPLETED', 'REJECTED']
                            BULK_PREP_HANDLER -> POS_DAO: Request to retrieve completedTimestamp
                            activate POS_DAO
                            POS_DAO -> DB: Return completedTimestamp
                            activate DB
                            hnote over DB #lightyellow
                                bulkTransfer
                                bulkTransferFulfilment
                            end note
                            POS_DAO <-- DB: Return completedTimestamp
                            deactivate DB
                            BULK_PREP_HANDLER <-- POS_DAO: Return completedTimestamp
                            deactivate POS_DAO
                            ' loop for each individual transfer in the bulk
                            '     BULK_PREP_HANDLER -> POS_DAO: Request to retrieve fulfilment, completedTimestamp \nfor each individual transferId
                            '     activate POS_DAO
                            '     POS_DAO -> DB: Request fulfilment, \ncompletedTimestamp for the transferId
                            '     activate DB
                            '     hnote over DB #lightyellow
                            '         transfer
                            '         transferFulfilment
                            '     end note
                            '     POS_DAO <-- DB: Return fulfilment, completedTimestamp \n(if they exist) for individual transfers
                            '     deactivate DB
                            '     BULK_PREP_HANDLER <-- POS_DAO: Return fulfilment, completedTimestamp \n(if they exist) for individual transfers
                            '     deactivate POS_DAO
                            ' end
                            note right of BULK_PREP_HANDLER #yellow
                                Message:
                                {
                                    id: <bulkTransferMessage.bulkTransferId>
                                    from: <bulkTransferMessage.payerFsp>,
                                    to: <bulkTransferMessage.payeeFsp>,
                                    type: application/json
                                    content: {
                                        headers: <bulkTransferHeaders>,
                                        payload: {
                                            bulkTransferState: "COMPLETED",
                                            completedTimestamp: "2019-10-24T08:38:08.699-04:00"
                                        }
                                    },
                                    metadata: {
                                        event: {
                                            id: <uuid>,
                                            responseTo: <previous.uuid>,
                                            type: bulk-notification,
                                            action: bulk-prepare-duplicate,
                                            createdAt: <timestamp>,
                                            state: {
                                                status: "success",
                                                code: 0
                                            }
                                        }
                                    }
                                }
                            end note
                            BULK_PREP_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification event for Payer with the completed bulk transfer
                            activate TOPIC_NOTIFICATIONS
                            deactivate TOPIC_NOTIFICATIONS
                        else If bulkTransferState IN ['RECEIVED', 'PENDING', 'ACCEPTED', 'PROCESSING']
                            note right of BULK_PREP_HANDLER #yellow
                                Message:
                                {
                                    id: <bulkTransferMessage.bulkTransferId>
                                    from: <bulkTransferMessage.payerFsp>,
                                    to: <bulkTransferMessage.payeeFsp>,
                                    type: application/json
                                    content: {
                                        headers: <bulkTransferHeaders>,
                                        payload: {
                                            bulkTransferState: "PENDING"
                                        }
                                    },
                                    metadata: {
                                        event: {
                                            id: <uuid>,
                                            responseTo: <previous.uuid>,
                                            type: bulk-notification,
                                            action: bulk-prepare-duplicate,
                                            createdAt: <timestamp>,
                                            state: {
                                                status: "success",
                                                code: 0
                                            }
                                        }
                                    }
                                }
                            end note
                            BULK_PREP_HANDLER <-> TOPIC_NOTIFICATIONS: Publish Notification event for Payer with the completed bulk transfer
                            activate TOPIC_NOTIFICATIONS
                            deactivate TOPIC_NOTIFICATIONS
                        else If bulkTransferState does not exist
                            note right of BULK_PREP_HANDLER #yellow
                                Message:
                                {
                                    id: <bulkTransferMessage.bulkTransferId>
                                    from: <ledgerName>,
                                    to: <bulkTransferMessage.payerFsp>,
                                    type: application/json
                                    content: {
                                        headers: <bulkTransferHeaders>,
                                        payload: {
                                            "errorInformation": {
                                                "errorCode": "3100"
                                                "errorDescription": "<error description>",
                                                "extensionList": <transferMessage.extensionList>
                                        }
                                    },
                                    metadata: {
                                        event: {
                                            id: <uuid>,
                                            responseTo: <previous.uuid>,
                                            type: bulk-notification,
                                            action: bulk-prepare-duplicate,
                                            createdAt: <timestamp>,
                                            state: {
                                                status: 'error',
                                                code: <errorInformation.errorCode>
                                                description: <errorInformation.errorDescription>
                                            }
                                        }
                                    }
                                }
                            end note
                            BULK_PREP_HANDLER -> TOPIC_NOTIFICATIONS: Send /error callback with appropriate error message\n(Invalid duplicate request)\n<color #FF0000><b>Error code:</b> 3100</color>
                            activate TOPIC_NOTIFICATIONS
                            deactivate TOPIC_NOTIFICATIONS
                        end
                    end
                else BulkTransfer exists, hash does not match
                    break
                        note right of BULK_PREP_HANDLER #yellow
                                Message:
                                {
                                    id: <bulkTransferMessage.bulkTransferId>
                                    from: <ledgerName>,
                                    to: <bulkTransferMessage.payerFsp>,
                                    type: application/json
                                    content: {
                                        headers: <bulkTransferHeaders>,
                                        payload: {
                                            "errorInformation": {
                                                "errorCode": "3106"
                                                "errorDescription": "<error description>",
                                                "extensionList": <transferMessage.extensionList>
                                        }
                                    },
                                    metadata: {
                                        event: {
                                            id: <uuid>,
                                            responseTo: <previous.uuid>,
                                            type: bulk-notification,
                                            action: bulk-prepare-duplicate,
                                            createdAt: <timestamp>,
                                            state: {
                                                status: 'error',
                                                code: <errorInformation.errorCode>
                                                description: <errorInformation.errorDescription>
                                            }
                                        }
                                    }
                                }
                            end note
                        BULK_PREP_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 3106</color>
                        activate TOPIC_NOTIFICATIONS
                        deactivate TOPIC_NOTIFICATIONS
                    end
                end

            else If bulkTransferId does NOT exist
                BULK_PREP_HANDLER -> POS_DAO: Request to persist Transfer Hash \n<color #FF0000><b>Error code:</b> 2003</color>
                activate POS_DAO
                POS_DAO -> DB: Persist Bulk Transfer message hash
                hnote over DB #lightyellow
                    bulkTransferDuplicateCheck
                end note
                activate DB
                deactivate DB
                POS_DAO --> BULK_PREP_HANDLER: Return success
                deactivate POS_DAO
            end
            deactivate POS_DAO
            
        end

        group Validate Payer
            BULK_PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payer Participant details (if it exists)
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request Participant details
            hnote over DB #lightyellow
                participant
                participantCurrency
            end note
            activate DB
            PARTICIPANT_DAO <-- DB: Return Participant details if it exists
            deactivate DB
            PARTICIPANT_DAO --> BULK_PREP_HANDLER: Return Participant details if it exists
            deactivate PARTICIPANT_DAO
            BULK_PREP_HANDLER <-> BULK_PREP_HANDLER: Validate Payer\n<color #FF0000><b>Error codes:</b> 3202</color>
        end
        group Validate Payee
            BULK_PREP_HANDLER -> PARTICIPANT_DAO: Request to retrieve Payee Participant details (if it exists)
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request Participant details
            hnote over DB #lightyellow
                participant
                participantCurrency
            end note
            activate DB
            PARTICIPANT_DAO <-- DB: Return Participant details if it exists
            deactivate DB
            PARTICIPANT_DAO --> BULK_PREP_HANDLER: Return Participant details if it exists
            deactivate PARTICIPANT_DAO
            BULK_PREP_HANDLER <-> BULK_PREP_HANDLER: Validate Payee\n<color #FF0000><b>Error codes:</b> 3203</color>
        end
        BULK_PREP_HANDLER <-> BULK_PREP_HANDLER: Validate crypto-condition\n<color #FF0000><b>Error codes:</b> 3100</color>
        
        alt Validate Bulk Prepare Transfer (success)
            group Persist Bulk Transfer State (with bulktransferState='RECEIVED')
                BULK_PREP_HANDLER -> POS_DAO: Request to persist bulk transfer\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate POS_DAO
                POS_DAO -> DB: Persist bulkTransfer
                hnote over DB #lightyellow
                    bulkTransfer
                    bulkTransferParticipant
                    bulkTransferStateChange
                    bulkTransferExtension
                end note
                activate DB
                deactivate DB
                POS_DAO --> BULK_PREP_HANDLER: Return success
                deactivate POS_DAO
            end
        else Validate Bulk Prepare Transfer (failure)
            group Persist Bulk Transfer State (with bulkTransferState='INVALID') (Introducing a new status INVALID to mark these entries)
                BULK_PREP_HANDLER -> POS_DAO: Request to persist bulk transfer\n(when Payee/Payer/crypto-condition validation fails)\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate POS_DAO
                POS_DAO -> DB: Persist transfer
                hnote over DB #lightyellow
                    bulkTransfer
                    bulkTransferParticipant
                    bulkTransferStateChange
                    bulkTransferExtension
                    bulkTransferError
                end note
                activate DB
                deactivate DB
                POS_DAO --> BULK_PREP_HANDLER: Return success
                deactivate POS_DAO
            end
        end

    end
    alt Validate Bulk Prepare Transfer (success)
        BULK_PREP_HANDLER -> BULK_PREP_HANDLER: Break down the bulk into individual transfers\n<color #FF0000><b>Error codes:</b> 2003</color>
        note right of BULK_PREP_HANDLER #lightgrey
            Add elements such as Expiry time, Payer FSP, Payee FSP, etc. to each
            transfer to make their format similar to a single transfer
        end note
        loop for every individual transfer in the bulk
            note right of BULK_PREP_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: bulk-prepare,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            BULK_PREP_HANDLER -> TOPIC_TRANSFER_PREPARE: Route & Publish Prepare event to the Payer for the Individual Transfer\n<color #FF0000><b>Error codes:</b> 2003</color>
            activate TOPIC_TRANSFER_PREPARE
            deactivate TOPIC_TRANSFER_PREPARE
        end
    else Validate Bulk Prepare Transfer (failure)
        note right of BULK_PREP_HANDLER #yellow
            Message:
            {
                id: <bulkTransferMessage.bulkTransferId>
                from: <ledgerName>,
                to: <bulkTransferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <bulkTransferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": <possible codes: [2003, 3100, 3105, 3106, 3202, 3203, 3300, 3301]>
                            "errorDescription": "<refer to section 7.6 for description>",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: bulk-notification,
                        action: bulk-abort,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        BULK_PREP_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
    end
end
deactivate BULK_PREP_HANDLER
@enduml

