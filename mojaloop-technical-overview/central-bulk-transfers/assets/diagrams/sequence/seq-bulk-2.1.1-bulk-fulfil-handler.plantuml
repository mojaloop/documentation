/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declare title
title 2.1.1. Bulk Fulfil Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-bulk-\nfulfil" as TOPIC_BULK_FULFIL
collections "topic-bulk-\nprocessing" as TOPIC_BULK_PROCESSING
control "Bulk Fulfil\nHandler" as BULK_FULF_HANDLER
collections "topic-transfer-\nfulfil" as TOPIC_TRANSFER_FULFIL
collections "topic-event" as TOPIC_EVENTS
collections "topic-notification" as TOPIC_NOTIFICATION
entity "Bulk DAO" as BULK_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_BULK_FULFIL
    participant BULK_FULF_HANDLER
    participant TOPIC_TRANSFER_FULFIL
    participant TOPIC_BULK_PROCESSING
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant BULK_DAO
    participant DB
end box

' start flow
activate BULK_FULF_HANDLER
group Bulk Fulfil Handler Consume
    TOPIC_BULK_FULFIL <- BULK_FULF_HANDLER: Consume message
    activate TOPIC_BULK_FULFIL
    deactivate TOPIC_BULK_FULFIL

    break
        group Validate Event
            BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: Validate event - Rule:\ntype == 'bulk-fulfil' && action == 'bulk-commit'\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
    end

    group Persist Event Information
        |||
        BULK_FULF_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over BULK_FULF_HANDLER, TOPIC_EVENTS:  Event Handler Consume \n
        |||
    end

    group Validate FSPIOP-Signature
        |||
        ref over BULK_FULF_HANDLER, TOPIC_NOTIFICATION: Validate message.content.headers.**FSPIOP-Signature**\n<color #FF0000><b>Error codes:</b> 3105/3106</color>
    end

    group Validate Bulk Fulfil Transfer
        BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: <color #gray>Schema validation of the incoming message</color>
        BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: <color #gray>Verify the message's signature</color>\n<color #gray>(to be confirmed in future requirement)</color>
        note right of BULK_FULF_HANDLER #lightgrey
            The above validation steps are already handled by
            the ML-Adapter for the open source implementation.
            It may need to be added in future for custom adapters.
        end note
        group Validate Bulk Fulfilment Duplicate Check
            BULK_FULF_HANDLER -> BULK_FULF_HANDLER: Generate bulkTransferFulfilmentId UUID
            BULK_FULF_HANDLER -> BULK_DAO: Request to retrieve Bulk transfer\nfulfilment hashes by bulkTransferId\n<color #FF0000><b>Error code:</b> 2003</color>
            activate BULK_DAO
            BULK_DAO -> DB: Request Bulk transfer fulfilment\nduplicate message hashes
            hnote over DB #lightyellow
                SELET transferId, hash
                FROM **bulkTransferFulfilmentDuplicateCheck**
                WHERE bulkTransferId = request.params.id
            end note
            activate DB
            BULK_DAO <-- DB: Return existing hashes
            deactivate DB
            BULK_DAO --> BULK_FULF_HANDLER: Return <color #red>**(list of)**</color> transfer fulfil message hash(es)
            deactivate BULK_DAO
            BULK_FULF_HANDLER -> BULK_FULF_HANDLER: Loop the list of returned hashes\nand compare each entry with the\ncalculated message hash

            alt Hash matched
                group Persist Event Information
                    |||
                    BULK_FULF_HANDLER -> TOPIC_EVENTS: Publish event information
                    ref over BULK_FULF_HANDLER, TOPIC_EVENTS:  Event Handler Consume\n
                    |||
                end
                BULK_FULF_HANDLER -> BULK_DAO: Request to retrieve Bulk transfer state\n<color #FF0000><b>Error code:</b> 2003</color>
                activate BULK_DAO
                BULK_DAO -> DB: Request to retrieve Bulk transfer state
                hnote over DB #lightyellow
                    bulkTransferStateChange
                end note
                activate DB
                BULK_DAO <-- DB: Return Bulk transfer state
                deactivate DB
                BULK_DAO --> BULK_FULF_HANDLER: Return Bulk transfer state
                deactivate BULK_DAO
                alt bulkTransferState IN ['COMPLETED', 'REJECTED']
                    break
                        ref over BULK_FULF_HANDLER, TOPIC_NOTIFICATION: Send notification to Participant (Payee)\n
                    end
                else transferState NOT 'ACCEPTED'
                    break
                        BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: <color #FF0000><b>Error code:</b> 2001</color>
                    end
                else
                    break
                        BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: Allow previous request to complete
                    end
                end
            else Hash not matched
                BULK_FULF_HANDLER -> BULK_DAO: Request to persist transfer hash\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate BULK_DAO
                BULK_DAO -> DB: Persist hash
                hnote over DB #lightyellow
                    bulkTransferFulfilmentDuplicateCheck
                end note
                activate DB
                deactivate DB
                BULK_DAO --> BULK_FULF_HANDLER: Return success
                deactivate BULK_DAO
            end
            
        end
        
        alt Validate Bulk Transfer Fulfil (success)
            group Persist Bulk Transfer State (with bulktransferState='PROCESSING')
                BULK_FULF_HANDLER -> BULK_DAO: Request to persist bulk transfer fulfil\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate BULK_DAO
                BULK_DAO -> DB: Persist bulkTransferFulfilment
                hnote over DB #lightyellow
                    bulkTransferFulfilment
                    bulkTransferStateChange
                    bulkTransferExtension
                end note
                activate DB
                deactivate DB
                BULK_DAO --> BULK_FULF_HANDLER: Return success
                deactivate BULK_DAO
            end
        else Validate Bulk Transfer Fulfil (failure)
            group Persist Bulk Transfer State (with bulkTransferState='INVALID/REJECTED')
                BULK_FULF_HANDLER -> BULK_DAO: Request to persist bulk\ntransfer fulfil failure\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate BULK_DAO
                BULK_DAO -> DB: Persist transfer
                hnote over DB #lightyellow
                    bulkTransferFulfilment
                    bulkTransferStateChange
                    bulkTransferExtension
                    bulkTransferError
                end note
                activate DB
                deactivate DB
                BULK_DAO --> BULK_FULF_HANDLER: Return success
                deactivate BULK_DAO
            end
        end

    end
    alt Validate Bulk Transfer Fulfil (success)
        BULK_FULF_HANDLER -> BULK_FULF_HANDLER: Break down the bulk into indidivual transfers\n<color #FF0000><b>Error codes:</b> 2003</color>
        loop for every individual transfer in the bulk fulfil list

            /' group Update Bulk Transfer Association (with bulkProcessingState='PROCESSING')
                BULK_FULF_HANDLER -> BULK_DAO: Request to persist bulk transfer association\n<color #FF0000><b>Error codes:</b> 2003</color>
                activate BULK_DAO
                BULK_DAO -> DB: Update bulkTransferAssociation
                hnote over DB #lightyellow
                    bulkTransferAssociation
                end note
                activate DB
                deactivate DB
                BULK_DAO --> BULK_FULF_HANDLER: Return success
                deactivate BULK_DAO
            end '/

            note right of BULK_FULF_HANDLER #yellow
                Message:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: bulk-fulfil,
                            action: fulfil,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            BULK_FULF_HANDLER -> TOPIC_TRANSFER_FULFIL: Route & Publish Prepare event to the Payer for the Individual Transfer\n<color #FF0000><b>Error codes:</b> 2003</color>
            activate TOPIC_TRANSFER_FULFIL
            deactivate TOPIC_TRANSFER_FULFIL
        end
    else Validate Bulk Transfer Fulfil (failure)
        note right of BULK_FULF_HANDLER #yellow
            Message:
            {
                id: <bulkTransferMessage.bulkTransferId>
                from: <ledgerName>,
                to: <bulkTransferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <bulkTransferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": <possible codes: [2003, 3100, 3105, 3106, 3202, 3203, 3300, 3301]>
                            "errorDescription": "<refer to section 35.1.3 for description>",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: bulk-processing,
                        action: bulk-abort,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        BULK_FULF_HANDLER -> TOPIC_NOTIFICATION: Publish Notification (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
        activate TOPIC_NOTIFICATION
        deactivate TOPIC_NOTIFICATION
    end
end
deactivate BULK_FULF_HANDLER
@enduml

