/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declare title
title 1.1.3. Bulk Processing Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-bulk-\nprocessing" as TOPIC_BULK_PROCESSING
control "Bulk Processing\nHandler" as BULK_PROC_HANDLER
collections "topic-transfer-\nprepare" as TOPIC_TRANSFER_PREPARE
collections "topic-event" as TOPIC_EVENTS
collections "topic-notification" as TOPIC_NOTIFICATION
entity "Bulk DAO" as BULK_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_BULK_PROCESSING
    participant BULK_PROC_HANDLER
    participant TOPIC_TRANSFER_PREPARE
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant BULK_DAO
    participant DB
end box

' start flow
activate BULK_PROC_HANDLER
group Bulk Processing Handler Consume
    TOPIC_BULK_PROCESSING <- BULK_PROC_HANDLER: Consume message
    activate TOPIC_BULK_PROCESSING
    deactivate TOPIC_BULK_PROCESSING

    break
        group Validate Event
            BULK_PROC_HANDLER <-> BULK_PROC_HANDLER: Validate event - Rule:\ntype == 'bulk-processing' && \naction IN ['prepare-duplicate','prepare','position',\n'fulfil-duplicate','reject','commit']\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
    end

    group Persist Event Information
        |||
        BULK_PROC_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over BULK_PROC_HANDLER, TOPIC_EVENTS:  Event Handler Consume {[[https://TODO-input-path-to/**/seq-event-9.1.0.svg 9.1.0]]} \n
        |||
    end

    group Process Message
        BULK_PROC_HANDLER -> BULK_DAO: Retrieve current state of Bulk Transfer
        activate BULK_DAO
        BULK_DAO -> DB: Retrieve current state of Bulk Transfer
        activate DB
        hnote over DB #lightyellow
            bulkTransfer
            bulkTransferStateChange
        end note
        BULK_DAO <-- DB: Return **bulkTransferInfo**
        deactivate DB
        BULK_PROC_HANDLER <-- BULK_DAO: Return **bulkTransferInfo**
        deactivate BULK_DAO

        note right of BULK_PROC_HANDLER #lightgrey
            Depending on the current state of the Bulk Transfer,
            determine success criteria - no individual transfer
            should remain in what state(s)? Use the output for
            the following...
        end note

        BULK_PROC_HANDLER -> BULK_DAO: Check if all individual transfers have been processed\n(fastest and least expensive method possible to be\nselected as it may be repeated 999 times before\nthe bulk transfer is ready for processing)
        activate BULK_DAO
        BULK_DAO -> DB: Check if all individual transfers have been processed
        activate DB
        hnote over DB #lightyellow
            bulkTransferAssociation
            transfer
            transferStateChange
        end note
        BULK_DAO <-- DB: Return **pendingTransfersList**
        deactivate DB
        BULK_PROC_HANDLER <-- BULK_DAO: Return **pendingTransfersList**
        deactivate BULK_DAO

        break pendingTransfersList.length > 0
            |||
            ref over BULK_PROC_HANDLER, TOPIC_EVENTS: Persist Event Information\n
            |||
        end

        BULK_PROC_HANDLER -> BULK_DAO: Request to retrieve all individual transfers in the bulk (heavy)
        activate BULK_DAO
        BULK_DAO -> DB: Request all individual transfers info
        activate DB
        hnote over DB #lightyellow
            bulkTransferAssociation
            transfer
            transferStateChange
            bulkTransfer
        end note
        BULK_DAO <-- DB: Return **individualTransfersInfo**
        deactivate DB
        BULK_PROC_HANDLER <-- BULK_DAO: Return **individualTransfersInfo**
        deactivate BULK_DAO

        note right of BULK_PROC_HANDLER #lightgrey
            let receivedPrepareList = []
            let reservedList = []
            let receivedFulfilList = []
            let committedList = []
            let failedList = []
            let reservedTimeoutList = []
            let receivedRejectList = []
            let abortedRejectedList = []
            let receivedErrorList = []
            let abortedErrorList = []
            let expiredPreparedList = []
            let expiredReservedList = []
            let invalidList = []
        end note
        loop for each individualTransfer in individualTransfersInfo
            BULK_PROC_HANDLER -> BULK_PROC_HANDLER: Push individualTransfer to the appropriate\nlist according to the transferState
        end

        group Process Agregated Data
            note right of BULK_PROC_HANDLER #lightgrey
                Depending on the list counts, decide the
                following state for the entrire Bulk Transfer:
                PENDING, PENDING_INVALID, ACCEPTED,
                PROCESSING, COMPLETED, REJECTED, INVALID.

                **<color #red>TODO</color>**: Reduce the above list to the possible
                states from Bulk Processing Handler.
            end note

            BULK_PROC_HANDLER -> BULK_DAO: Persist Bulk Transfer state
            activate BULK_DAO
            BULK_DAO -> DB: Persist Bulk Transfer state
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                bulkTransferStateChange
            end note
            BULK_PROC_HANDLER <-- BULK_DAO: Return success
            deactivate BULK_DAO
        end

        group Send Bulk Notification
            note right of BULK_PROC_HANDLER #lightgrey
                Use individualTransfersInfo to complete individual
                transfer results to be included in the response payload.
            end note
            note right of BULK_PROC_HANDLER #yellow
                Message:
                {
                    id: <bulkTransferMessage.bulkTransferId>
                    from: <ledgerName>,
                    to: <bulkTransferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <bulkTransferHeaders>,
                        payload: <bulkTransferWithIndividualTransferResult>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: bulk-notification,
                            action: bulk-notification,
                            createdAt: <timestamp>,
                            state: {
                                status: 'success',
                                code: 0
                            }
                        }
                    }
                }
            end note
            BULK_PROC_HANDLER -> TOPIC_NOTIFICATION: Publish Notification event for Payer/Payee\n<color #FF0000><b>Error codes:</b> 2003</color>
            activate TOPIC_NOTIFICATION
            deactivate TOPIC_NOTIFICATION
        end
    end
end
deactivate BULK_PROC_HANDLER
@enduml

