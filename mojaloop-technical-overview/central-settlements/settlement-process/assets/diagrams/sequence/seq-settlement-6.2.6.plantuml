/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 6.2.6. Settlement Abort (abortSettlementById)
autonumber

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Settlement Service API" as SSAPI
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Central HUB" #lightpink
    participant OPERATOR
end box

box "Settlement Service" #lightgreen
    participant SSAPI
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
group Settlement Abort
    activate OPERATOR
    note right of OPERATOR #yellow
        {
            "state": "ABORTED",
            "reason": {abortReasonString}
        }
    end note

    OPERATOR -> SSAPI: PUT - /settlement/{id}
    activate SSAPI
    SSAPI -> SETTLE_DAO: abortSettlementById facade method\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO

    SETTLE_DAO -> DB: Retrieve settlement information
    activate DB
    hnote over DB #lightyellow
        SELECT s.settlementId, ssc.settlementStateId,
            ssc.reason, ssc.createdDate
        FROM **settlement** s
        JOIN **settlementStateChange** ssc
        ON ssc.settlementStateChangeId = s.currentStateChangeId
        WHERE s.settlementId = {id}
    end hnote
    SETTLE_DAO <-- DB: Return **settlementData**
    deactivate DB

    alt settlementData.settlementStateId == 'PS_TRANSFERS_COMMITTED'||\nsettlementData.settlementStateId == 'SETTLING'||\nsettlementData.settlementStateId == 'SETTLED'
    break
        note right of SETTLE_DAO #yellow
            {
                errorInformation: {
                    "errorCode": <integer>,
                    "errorDescription": "State change is not allowed"
                }
            }
        end note
    end
    else settlementData.settlementStateId == 'ABORTED'
    break
        SETTLE_DAO -> DB: Append additional info at settlement level
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            INSERT INTO **settlementStateChange**
                (settlementId, settlementStateId, reason)
            VALUES ({id}, 'ABORTED', {abortReasonString})
        end hnote

        note right of SETTLE_DAO #yellow
            {
                "id": {id},
                "state": 'ABORTED',
                "reason": {abortReasonString}
            }
        end note
    end
    else settlementData.settlementStateId == 'PS_TRANSFERS_RESERVED'
        SETTLE_DAO -> DB: Find account in PS_TRANSFERS_COMMITTED
        activate DB
        hnote over DB #lightyellow
            SELECT spc.participantCurrencyId
            FROM **settlementParticipantCurrency** spc
            JOIN **settlementParticipantCurrencyStateChange** spcsc
            ON spcsc.settlementParticipantCurrencyStateChangeId = spc.currentStateChangeId
            WHERE spc.settlementId = {id}
            AND spcsc.settlementStateId = 'PS_TRANSFERS_COMMITTED'
            LIMIT 1
        end hnote
        SETTLE_DAO <-- DB: Return **transferCommittedAccount**
        deactivate DB
        break transferCommittedAccount != undefined
            note right of SETTLE_DAO #yellow
                {
                    errorInformation: {
                        "errorCode": <integer>,
                        "errorDescription": "At least one settlement transfer is committed"
                    }
                }
            end note
        end
    end

    group <color #blue>DB TRANSACTION</color>
        SETTLE_DAO -> DB: Retrive settlement accounts information
        activate DB
        hnote over DB #lightyellow
            SELECT pc.participantId, spc.participantCurrencyId,
                spcsc.settlementStateId, spcsc.reason,
                spcsc.createdDate, spc.netAmount, pc.currencyId,
                spc.settlementParticipantCurrencyId AS <color #0000FF>key</color>
            FROM **settlementParticipantCurrency** spc
            JOIN **settlementParticipantCurrencyStateChange** spcsc
            ON spcsc.settlementParticipantCurrencyStateChangeId =
            spc.currentStateChangeId
            JOIN **participantCurrency** pc
            ON pc.participantCurrencyId = spc.participantCurrencyId
            WHERE spc.settlementId = {id}
            FOR UPDATE
        end hnote
        SETTLE_DAO <-- DB: Return **settlementAccountsList**
        deactivate DB

        SETTLE_DAO -> DB: Retrive settlement windows information
        activate DB
        hnote over DB #lightyellow
            SELECT ssw.settlementWindowId, swsc.settlementWindowStateId,
                swsc.reason, swsc.createdDate
            FROM **settlementSettlementWindow** ssw
            JOIN **settlementWindow** sw
            ON sw.settlementWindow = ssw.settlementWindowId
            JOIN **settlementWindowStateChange** swsc
            ON swsc.settlementWindowStateChangeId = sw.currentStateChangeId
            WHERE ssw.settlementId = {id}
            FOR UPDATE
        end hnote
        SETTLE_DAO <-- DB: Return **windowsList**
        deactivate DB

        group Bulk insert settlementParticipantCurrencyStateChange
            SETTLE_DAO -> DB: Insert settlementParticipantCurrencyStateChange
            activate DB
            hnote over DB #lightyellow
                settlementParticipantCurrencyStateChange
            end hnote
            SETTLE_DAO <-- DB: Return **spcscIdList**
            deactivate DB

            SETTLE_DAO -> SETTLE_DAO: Merge spcscIdList into settlementAccountsList

            SETTLE_DAO -> DB: Update all pointers to current state change ids
            activate DB
            hnote over DB #lightyellow
                UPDATE **settlementParticipantCurrency**.currentStateChangeIds
            end hnote
            deactivate DB
        end

        ref over SETTLE_DAO, DB: Settlement Transfer Abort\n\n**Inputs**: settlementId, transactionTimestamp, enums, trx\n

        group Bulk insert settlementWindowStateChange
            SETTLE_DAO -> DB: Insert settlementWindowStateChange
            activate DB
            hnote over DB #lightyellow
                settlementWindowStateChange
            end hnote
            SETTLE_DAO <-- DB: Return **swscIdList**
            deactivate DB

            SETTLE_DAO -> SETTLE_DAO: Merge swscIdList into windowList

            SETTLE_DAO -> DB: Update all pointers to current state change ids
            activate DB
            hnote over DB #lightyellow
                UPDATE **settlementWindow**.currentStateChangeIds
            end hnote
            deactivate DB
        end

        group Insert settlementStateChange
            SETTLE_DAO -> DB: Insert settlementStateChange
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **settlementStateChange**
                    (settlementId, settlementStateId, reason)
                VALUES ({id}, 'ABORTED', {abortReasonString})
            end hnote
            SETTLE_DAO <-- DB: Return **settlementStateChangeId**
            deactivate DB

            SETTLE_DAO -> DB: Update pointer to current state change id
            activate DB
            hnote over DB #lightyellow
                UPDATE **settlement**.currentStateChangeId
            end hnote
            deactivate DB
        end
    end
    SSAPI <-- SETTLE_DAO: Return facade method result
    deactivate SETTLE_DAO

    alt success
        note left of SSAPI #yellow
            {
                "id": {id},
                "state": 'ABORTED',
                "reason": {abortReasonString}
            }
        end note

        SSAPI --> OPERATOR: Respond HTTP - 200 (OK)
      else
        note right of SSAPI #lightgray
            Log ERROR event
        end note
        note left of SSAPI #yellow
            {
                errorInformation: {
                    "errorCode": <integer>,
                    "errorDescription": "Client/Server error description"
                }
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP 4xx or 5xx\n(Client/Server error)
        deactivate SSAPI
    end
end
deactivate OPERATOR
@enduml
