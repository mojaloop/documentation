/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 5.1.0.b. Transfer state and position change (transferStateAndPositionChange)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
entity "Transfer DAO" as TRANSFER_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TRANSFER_DAO
    participant DB
end box

' start flow
group transferStateAndPositionUpdate (param1, trx)
    note right of TRANSFER_DAO #lightgray
        **param1** = {
            transferId: {payload.transferId},
            transferStateId: "enum",
            reason: {payload.reason},
            createdDate: {transactionTimestamp},
            drUpdated: "boolean",
            crUpdated: "boolean"
        }
    end note

    TRANSFER_DAO -> DB: Select all required info
    activate DB
    hnote over DB #lightyellow
        SELECT dr.participantCurrencyId AS drAccountId,
            dr.amount AS drAmount, drp.participantPositionId AS drPositionId,
            drp.value AS drPositionValue, drp.reservedValue AS drReservedValue,
            cr.participantCurrencyId AS crAccountId,
            cr.amount AS crAmount, crp.participantPositionId AS crPositionId,
            crp.value AS crPositionValue, crp.reservedValue AS crReservedValue,
            tsc.transferStateId
        FROM **transfer** t
        JOIN **transferParticipant** dr
        ON dr.transferId = t.transferId
        AND dr.amount > 0
        JOIN **participantCurrency** drpc
        ON drpc.participantCurrencyId = dr.participantCurrencyId
        JOIN **participantPosition** drp
        ON drp.participantCurrencyId = dr.participantCurrencyId
        JOIN **transferParticipant** cr
        ON cr.transferId = t.transferId
        AND cr.amount < 0
        JOIN **participantCurrency** crpc
        ON crpc.participantCurrencyId = dr.participantCurrencyId
        JOIN **participantPosition** crp
        ON crp.participantCurrencyId = cr.participantCurrencyId
        JOIN **transferStateChange** tsc
        ON tsc.transferId = t.transferId
        WHERE t.transferId = param1.tranferId
        AND drpc.ledgerAccountTypeId IN('POSITION', 'SETTLEMENT', '
            HUB_RECONCILIATION', 'HUB_MULTILATERAL_SETTLEMENT')
        AND crpc.ledgerAccountTypeId IN('POSITION', 'SETTLEMENT', '
            HUB_RECONCILIATION', 'HUB_MULTILATERAL_SETTLEMENT')
        ORDER BY transferStateChangeId DESC
        LIMIT 1
    end hnote
    TRANSFER_DAO <-- DB: Return **info**
    deactivate DB

    opt param1.transferStateId == 'COMMITTED'
        TRANSFER_DAO -> DB: Change transfer state
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            INSERT INTO **transferStateChange** (transferId, transferStateId, reason, createdDate)
            VALUES ({param1.transferId, 'RECEIVED_FULFIL', {param1.reason}, {param1.createdDate})
        end hnote
    else param1.transferStateId == 'ABORTED'
        TRANSFER_DAO -> DB: Change transfer state
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            INSERT INTO **transferStateChange** (transferId, transferStateId, reason, createdDate)
            VALUES ({param1.transferId, 'REJECTED', {param1.reason}, {param1.createdDate})
        end hnote
    end

    TRANSFER_DAO -> DB: Change transfer state
    activate DB
    hnote over DB #lightyellow
        INSERT INTO **transferStateChange** (transferId, transferStateId, reason, createdDate)
        VALUES ({param1.transferId, {param1.transferStateId}, {param1.reason}, {param1.createdDate})
    end hnote
    TRANSFER_DAO <-- DB: Return **transferStateChangeId**
    deactivate DB

    opt param1.drUpdated == true
        opt param1.transferStateId == 'ABORTED'
            note right of TRANSFER_DAO #lightgray
                info.drAmount = -info.drAmount
            end note
        end

        TRANSFER_DAO -> DB: Change DR position
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            UPDATE **participantPosition**
            SET value = {info.drPositionValue + info.drAmount}
            WHERE participantPositionId = {info.drPositionId}

            INSERT INTO **participantPositionChange** (participantPositionId,
                transferStateChangeId, value, reservedValue, createdDate)
            VALUES ({info.drPositionId}, {transferStateChangeId},
                {info.drPositionValue + info.drAmount}, {info.drReservedValue},
                {param1.createdDate})
        end hnote
    end

    opt param1.crUpdated == true
        opt param1.transferStateId == 'ABORTED'
            note right of TRANSFER_DAO #lightgray
                info.crAmount = -info.crAmount
            end note
        end

        TRANSFER_DAO -> DB: Change CR position
        activate DB
        deactivate DB
        hnote over DB #lightyellow
            UPDATE **participantPosition**
            SET value = {info.crPositionValue + info.crAmount}
            WHERE participantPositionId = {info.crPositionId}

            INSERT INTO **participantPositionChange** (participantPositionId,
                transferStateChangeId, value, reservedValue, createdDate)
            VALUES ({info.crPositionId}, {transferStateChangeId},
                {info.crPositionValue + info.crAmount}, {info.crReservedValue},
                {param1.createdDate})
        end hnote
    end

    note right of TRANSFER_DAO #lightgray
        **return** {
            transferStateChangeId,
            drPositionValue: {info.drPositionValue + info.drAmount}
            crPositionValue: {info.crPositionValue + info.crAmount}
        }
    end note
end
@enduml
