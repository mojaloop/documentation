/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * ModusBox
 - Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 6.1.2. Close Settlement Window (closeSettlementWindow)

autonumber 

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Settlement Service API" as SSAPI
collections "topic-\nsettlement-window" as TOPIC_SET_WIN
control "Settlement Window\nHandler" as SET_WIN_HANDLER
collections "topic-event" as TOPIC_EVENT
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Central HUB" #lightpink
    participant OPERATOR
end box

box "Settlement Service" #lightgreen
    participant SSAPI
    participant TOPIC_SET_WIN
    participant SET_WIN_HANDLER
    participant TOPIC_EVENT
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
group Close Settlement Window
    activate OPERATOR
    activate SET_WIN_HANDLER
    note right of OPERATOR #yellow
        {
            "state": "CLOSED",
            "reason": <string>
        }
    end note

    OPERATOR -> SSAPI: POST - /settlementWindows/{id}
    activate SSAPI
    SSAPI -> SSAPI: Validate payload, existing window,\nstate, assigned transfers, etc.
    break
        note right of SSAPI #yellow
            {
                "errorInformation": {
                    "errorCode": <integer>,
                    "errorDescription": "FSPIOP Error Description"
                }
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - 400 (Bad Request)
    end
    SSAPI -> SETTLE_DAO: Get requested settlementWindow and state\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Get settlementWindow state
    activate DB
    hnote over DB #lightyellow
        SELECT sw.settlementWindowId, swsc.settlementWindowStateId, 
               swsc.reason, sw.createdDate, swsc.createdDate changedDate
        FROM **settlementWindow** AS sw
        JOIN **settlementWindowStateChange** AS swsc
        ON swsc.settlementWindowStateChangeId = sw.currentStateChangeId
        WHERE sw.settlementWindowId = {id}
    end hnote
    deactivate DB
    SETTLE_DAO --> SSAPI: Return result
    deactivate SETTLE_DAO

    alt settlementWindow found && settlementWindowStateId == 'OPEN'
        group Process settlement window
            SSAPI -> SETTLE_DAO: Terminate current window and open a new one\n<color #FF0000><b>Error code:</b> 2001</color>
            activate SETTLE_DAO
            group <color #blue>DB TRANSACTION: Terminate window usage and initate next</color>
                note right of SETTLE_DAO #lightgray
                    let **transactionTimestamp** = now()
                end note

                SETTLE_DAO -> DB: Terminate requested window
                activate DB
                hnote over DB #lightyellow
                    INSERT INTO **settlementWindowStateChange**
                        (settlementWindowId, settlementWindowStateId, reason, createdDate)
                    VALUES ({id}, 'PROCESSING', {payload.reason}, {transactionTimestamp})
                end hnote
                SETTLE_DAO <-- DB: Return **settlementWindowStateChangeId**
                deactivate DB

                SETTLE_DAO -> DB: Update pointer to current state change id
                activate DB
                hnote over DB #lightyellow
                    UPDATE **settlementWindow**
                    SET currentStateChangeId = {settlementWindowStateChangeId}
                    WHERE settlementWindowId = {id}
                end hnote
                deactivate DB

                SETTLE_DAO -> DB: Create new settlementWindow
                activate DB
                hnote over DB #lightyellow
                    INSERT INTO **settlementWindow** (reason, createdDate)
                    VALUES ({payload.reason}, {transactionTimestamp})
                end note
                SETTLE_DAO <-- DB: Return **settlementWindowId**
                deactivate DB

                SETTLE_DAO -> DB: Insert intial state for the created window
                activate DB
                hnote over DB #lightyellow
                    INSERT INTO **settlementWindowStateChange**
                        (settlementWindowId, settlementWindowStateId, reason, createdDate)
                    VALUES ({settlementWindowId}, 'OPEN', {payload.reason}, {transactionTimestamp})
                end note
                SETTLE_DAO <-- DB: Return **newSettlementWindowStateChangeId**
                deactivate DB

                SETTLE_DAO -> DB: Update pointer to current state change id
                activate DB
                hnote over DB #lightyellow
                    UPDATE **settlementWindow**
                    SET currentStateChangeId = {newSettlementWindowStateChangeId}
                    WHERE settlementWindowId = {settlementWindowId}
                end hnote
                deactivate DB
            end
            SSAPI <-- SETTLE_DAO: Return success
            deactivate SETTLE_DAO
        end

        note right of SSAPI #yellow
            Message:
            {
                id: <uuid>
                from: switch,
                to: switch,
                type: application/json
                content: {
                    payload: {
                        settlementWindowId: {id}
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: null,
                        type: setwin,
                        action: close,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        SSAPI -> TOPIC_SET_WIN: Produce Settlement Window\nevent message\n<color #FF0000><b>Error codes:</b> 2003</color>
        activate TOPIC_SET_WIN
        deactivate TOPIC_SET_WIN
        
        note left of SSAPI #yellow
            {
                "id": settlementWindowId,
                "state": 'OPEN',
                "reason": payload.reason,
                "createdDate": transactionTimestamp,
                "changedDate": transactionTimestamp
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - 201 (Created)
        deactivate SSAPI
        deactivate OPERATOR

        group Close settlement window (SettlementWindowHandler)
            TOPIC_SET_WIN <- SET_WIN_HANDLER: Consume Settlement Window\nevent message
            activate TOPIC_SET_WIN
            deactivate TOPIC_SET_WIN
    
            group Persist Event Information
                |||
                SET_WIN_HANDLER -> TOPIC_EVENT: Publish event information
                ref over SET_WIN_HANDLER, TOPIC_EVENT:  Event Handler Consume\n
                |||
            end
            note right of SET_WIN_HANDLER #lightgray
                let **id** = message.content.payload.settlementWindowId
                let **windowContentReady** = false
                let **iter** = 0
            end note

            loop iter < Config.WIN_AGGREGATION_RETRY_COUNT && !windowContentReady
                note right of SET_WIN_HANDLER #lightgray
                    iter++
                end note

                SET_WIN_HANDLER -> SETTLE_DAO: Check if all transferParticipant records\nfor the requested window have been set\n(currentStateChangeId is NOT NULL).\n<color #FF0000><b>Error code:</b> 2001</color>
                activate SETTLE_DAO
                SETTLE_DAO -> DB: Use EXISTS query to find NULL currentStateChangeId records
                activate DB
                hnote over DB #lightyellow
                    transferFulfilment
                    transferParticipant
                end hnote
                deactivate DB
                SET_WIN_HANDLER <-- SETTLE_DAO: Return result (success / failure)
                deactivate SETTLE_DAO

                opt transferParticipant records have been processed by central-ledger SettlementModelHandler
                    SET_WIN_HANDLER -> SETTLE_DAO: Generate window content and aggregations\n<color #FF0000><b>Error code:</b> 2001</color>
                    activate SETTLE_DAO
                    group <color #blue>DB TRANSACTION: Generate window content and aggregations</color>
                        note right of SETTLE_DAO #lightgray
                            let **transactionTimestamp** = now()
                        end note

                        SETTLE_DAO -> DB: Change all applicable entries to CLOSED state
                        activate DB
                        hnote over DB #lightyellow
                            transferParticipantStateChange
                            transferParticipant
                            
                        end hnote
                        deactivate DB

                        SETTLE_DAO -> DB: Determine window content and insert
                        activate DB
                        hnote over DB #lightyellow
                            INSERT INTO **settlementWindowContent** (settlementWindowId, ledgerAccountTypeId,
                                currencyId,  createdDate)
                            SELECT DISTINCT {id} settlementWindowId, pc.ledgerAccountTypeId,
                                pc.currencyId, transactionTimestamp
                            FROM **transferFulfilment** tf
                            JOIN **transferParticipant** tp
                            ON tp.transferId = tf.transferId
                            JOIN **participantCurrency** pc
                            ON pc.participantCurrencyId = tp.participantCurrencyId
                            WHERE tf.settlementWindowId = {id}
                        end hnote
                        deactivate DB

                        SETTLE_DAO -> DB: Aggregate window data and insert
                        activate DB
                        hnote over DB #lightyellow
                            INSERT INTO **settlementContentAggregation** (settlementWindowContentId, participantCurrencyId, 
                                transferParticipantRoleTypeId, ledgerEntryTypeId, currentStateId, createdDate, amount)
                            SELECT swc.settlementWindowContentId, pc.participantCurrencyId, tp.transferParticipantRoleTypeId,
                                tp.ledgerEntryTypeId, 'CLOSED', transactionTimestamp, SUM(tp.amount)
                            FROM **transferFulfilment** tf
                            JOIN **transferParticipant** tp
                            ON tf.transferId = tp.transferId
                            JOIN **participantCurrency** pc
                            ON pc.participantCurrencyId = tp.participantCurrencyId
                            JOIN **settlementWindowContent** swc
                            ON swc.settlementWindowId = tf.settlementWindowId
                            AND swc.ledgerAccountTypeId = pc.ledgerAccountTypeId
                            AND swc.currencyId = pc.currencyId
                            WHERE ttf.settlementWindowId = {id}
                            GROUP BY swc.settlementWindowContentId, pc.participantCurrencyId, 
                                tp.transferParticipantRoleTypeId, tp.ledgerEntryTypeId
                        end hnote
                        deactivate DB

                        SETTLE_DAO -> DB: Insert initial window content state change
                        activate DB
                        hnote over DB #lightyellow
                            INSERT INTO **settlementWindowContentStateChange**
                                (settlementWindowContentId, settlementWindowStateId)
                            SELECT swc.settlementWindowContentId, 'CLOSED'
                            FROM **settlementWindowContent** swc
                            WHERE swc.settlementWindowId = {id}
                        end hnote
                        deactivate DB

                        SETTLE_DAO -> DB: Update pointers to current state change ids
                        activate DB
                        hnote over DB #lightyellow
                            settlementWindowContent
                        end hnote
                        deactivate DB
                    end
                    SETTLE_DAO --> SET_WIN_HANDLER: Return result (success / failure)
                    deactivate SETTLE_DAO
                end

                alt success
                    note right of SET_WIN_HANDLER #lightgray
                        windowContentReady = true
                    end note
                    SET_WIN_HANDLER -> SETTLE_DAO: Close requested window\n<color #FF0000><b>Error code:</b> 2001</color>
                    activate SETTLE_DAO
                    SETTLE_DAO -> DB: Change window state to 'CLOSED'
                    activate DB
                    hnote over DB #lightyellow
                        settlementWindowStateChange
                        settlementWindow.currentStateChangeId
                    end hnote
                    deactivate DB
                    deactivate SETTLE_DAO
                else failure && iter < Config.WIN_AGGREGATION_RETRY_COUNT
                    note right of SET_WIN_HANDLER #lightgray
                        **sleep** Config.WIN_AGGREGATION_RETRY_INTERVAL seconds
                    end note
                else failure
                    SET_WIN_HANDLER -> SETTLE_DAO: Fail requested window\n<color #FF0000><b>Error code:</b> 2001</color>
                    activate SETTLE_DAO
                    SETTLE_DAO -> DB: Change window state to 'FAILED'
                    activate DB
                    hnote over DB #lightyellow
                        settlementWindowStateChange
                        settlementWindow.currentStateChangeId
                    end hnote
                    deactivate DB
                    deactivate SETTLE_DAO

                    SET_WIN_HANDLER ->> SET_WIN_HANDLER: Log ERROR event
                end
            end
        end
    else
        SSAPI ->> SSAPI: Log ERROR event
        activate SSAPI
        note left of SSAPI #yellow
            {
                "errorInformation": {
                    "errorCode": <integer>,
                    "errorDescription": "Client error description"
                }
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - 4xx (Client error)
        deactivate SSAPI
        activate OPERATOR
    end
    deactivate OPERATOR
    deactivate SET_WIN_HANDLER
end
@enduml
