/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 5.1.1. Record Funds In (recordFundsIn)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Central Service\n Admin API" as CS_ADMIN_API
collections "Admin-Transfer-Topic" as TOPIC_ADMIN_TRANSFER
control "Admin Event Handler" as ADMIN_HANDLER
entity "Transfer DAO" as TRANSFER_DAO
database "Central Store" as DB

box "Central HUB" #lightpink
    participant OPERATOR
end box

box "Central Service" #LightYellow
    participant CS_ADMIN_API
	participant TOPIC_ADMIN_TRANSFER
    participant ADMIN_HANDLER
    participant TRANSFER_DAO
    participant DB
end box

' start flow
activate ADMIN_HANDLER
group Record Funds In
    note right of OPERATOR #yellow
        {
            "transferId": <uuid>,
            "externalReference": "string",
            "action": "recordFundsIn",
            "amount": {
                "amount": <decimal>,
                "currency": "string"

            },
            "reason": "string",
            "extensionList": {
                "extension": [
                    {
                        "key": "string",
                        "value": "string"
                    }
                ]
            }
        }
    end note
    OPERATOR -> CS_ADMIN_API: POST - /participants/{name}/accounts/{id}
    activate CS_ADMIN_API

    note right of CS_ADMIN_API #yellow
        Message:
        {
            id: <payload.transferId>
            from: "dfspName",
            to: "Hub",
            type: "application/json"
            content: {
                headers: <payloadHeaders>,
                payload: <payloadMessage>
            },
            metadata: {
                event: {
                    id: <uuid>,
                    responseTo: "",
                    type: "transfer",
                    action: "recordFundsIn",
                    createdAt: <timestamp>,
                    state: ""
                }
            },
            pp: ""
        }
    end note
    CS_ADMIN_API -> TOPIC_ADMIN_TRANSFER: Route & Publish Prepare event\n<color #FF0000><b>Error code:</b> 2003</color>
    activate TOPIC_ADMIN_TRANSFER
    TOPIC_ADMIN_TRANSFER <-> TOPIC_ADMIN_TRANSFER: Ensure event is replicated\nas configured (ACKS=all)\n<color #FF0000><b>Error code:</b> 2003</color>
    TOPIC_ADMIN_TRANSFER --> CS_ADMIN_API: Respond replication acks\nhave been received
    deactivate TOPIC_ADMIN_TRANSFER
    CS_ADMIN_API ---> OPERATOR: Respond HTTP - 202 (Accepted)
    deactivate CS_ADMIN_API

    TOPIC_ADMIN_TRANSFER <- ADMIN_HANDLER: Consume message
    ADMIN_HANDLER -> TRANSFER_DAO: Prepare transfer
    activate TRANSFER_DAO
    group <color #blue>DB TRANSACTION</color>
        group Reconciliation Transfer Prepare
            |||
            ref over TRANSFER_DAO, DB:**reconciliationTransferPrepare**\n(payload, trx)\n
        end

        group Reconciliation Transfer Reserve
            |||
            ref over TRANSFER_DAO, DB: **transferStateAndPositionUpdate**\n({\n    transferId: {payload.transferId},\n    transferStateId: "RESERVED",\n    reason: {payload.reason},\n    createdDate: {transactionTimestamp},\n    drUpdated: true,\n    crUpdated: false\n}, trx)\n
        end

        group Reconciliation Transfer Commit
            TRANSFER_DAO -> DB: Insert transferFulfilment record
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                INSERT INTO **transferFulfilment**
                    (transferFulfilmentId, transferId, ilpFulfilment,
                    completedDate, isValid, settlementWindowId, createdDate)
                VALUES ({Uuid()}, {payload.transferId}, 0, {transactionTimestamp},
                    1, NULL, {transactionTimestamp})
            end hnote
            |||
            ref over TRANSFER_DAO, DB:**transferStateAndPositionUpdate**\n({\n    transferId: {payload.transferId},\n    transferStateId: "COMMITTED",\n    reason: {payload.reason},\n    createdDate: {transactionTimestamp},\n    drUpdated: false,\n    crUpdated: true\n}, trx)\n
        end
    end
    ADMIN_HANDLER <-- TRANSFER_DAO: Finished await
    deactivate TRANSFER_DAO
end
deactivate ADMIN_HANDLER
@enduml
