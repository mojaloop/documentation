/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 5.1.0.a. Reconciliation transfer prepare (reconciliationTransferPrepare)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
entity "Transfer DAO" as TRANSFER_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TRANSFER_DAO
    participant DB
end box

' start flow
group reconciliationTransferPrepare (payload, trx)
    TRANSFER_DAO -> DB: Insert transferDuplicateCheck
    activate DB
    deactivate DB
    hnote over DB #lightyellow
        INSERT INTO **transferDuplicateCheck** (transferId, hash, createdDate)
        VALUES ({payload.transferId}, hashCode({payload.transferId}), {transactionTimestamp})
    end hnote

    TRANSFER_DAO -> DB: Insert transfer
    activate DB
    deactivate DB
    hnote over DB #lightyellow
        INSERT INTO **transfer** (transferId, amount, currencyId,
            ilpCondition, expirationDate, createdDate)
        VALUES ({payload.transferId}, {payload.amount.amount},
            {payload.amount.curency}, 0,
            {new Date()+Config.INTERNAL_TRANSFER_VALIDITY_SECONDS},
            {transactionTimestamp})
    end hnote

    TRANSFER_DAO -> DB: Retrieve hub reconciliation account
    activate DB
    hnote over DB #lightyellow
        SELECT participantCurrencyId AS reconciliationAccountId
        FROM **participantCurrency**
        WHERE participantId = 1
        AND currencyId = {payload.amount.currency}
        LIMIT 1
    end hnote
    deactivate DB
    TRANSFER_DAO <-- DB: Return **reconciliationAccountId**

    alt payload.action == 'RECORD_FUNDS_IN'
        note right of TRANSFER_DAO #lightgray
            **ledgerEntryTypeId** = 'RECORD_FUNDS_IN'
            **amount** = <color #blue>payload.amount.amount</color>
        end note
    else payload.action == 'RECORD_FUNDS_OUT_PREPARE'
        note right of TRANSFER_DAO #lightgray
            **ledgerEntryTypeId** = 'RECORD_FUNDS_OUT'
            **amount** = <color #red>-payload.amount.amount</color>
        end note
    end

    TRANSFER_DAO -> DB: Insert transferParticipant records
    activate DB
    deactivate DB
    hnote over DB #lightyellow
        INSERT INTO **transferParticipant**
            (transferId, participantCurrencyId, transferParticipantRoleTypeId,
            ledgerEntryTypeId, amount, createdDate)
        VALUES (payload.transferId, reconciliationAccountId, 'HUB',
            {ledgerEntryTypeId}, {amount}, {transactionTimestamp})

        INSERT INTO **transferParticipant**
            (transferId, participantCurrencyId, transferParticipantRoleTypeId,
            ledgerEntryTypeId, amount, createdDate)
        VALUES ({payload.transferId}, {payload.participantCurrencyId}, 'DFSP_SETTLEMENT',
            {ledgerEntryTypeId}, {-amount}, {transactionTimestamp})
    end hnote

    TRANSFER_DAO -> DB: Insert transferStateChange record
    activate DB
    deactivate DB
    hnote over DB #lightyellow
        INSERT INTO **transferStateChange**
            (transferId, transferStateId, reason, createdDate)
        VALUES ({payload.transferId}, 'RECEIVED_PREPARE',
            {payload.reason}, {transactionTimestamp})
    end hnote

    TRANSFER_DAO -> DB: Save externalReference and extensions
    activate DB
    deactivate DB
    hnote over DB #lightyellow
        transferExtension
    end hnote
end
@enduml
