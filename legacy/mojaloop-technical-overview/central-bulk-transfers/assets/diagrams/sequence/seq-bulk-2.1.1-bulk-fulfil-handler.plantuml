/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declare title
title 2.1.1. Bulk Fulfil Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "mongo-\nobject-store" as OBJECT_STORE
collections "topic-bulk-\nfulfil" as TOPIC_BULK_FULFIL
collections "topic-bulk-\nprocessing" as TOPIC_BULK_PROCESSING
control "Bulk Fulfil\nHandler" as BULK_FULF_HANDLER
collections "topic-transfer-\nfulfil" as TOPIC_TRANSFER_FULFIL
collections "topic-event" as TOPIC_EVENTS
collections "topic-notification" as TOPIC_NOTIFICATION
entity "Bulk DAO" as BULK_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant OBJECT_STORE
    participant TOPIC_BULK_FULFIL
    participant BULK_FULF_HANDLER
    participant TOPIC_TRANSFER_FULFIL
    participant TOPIC_BULK_PROCESSING
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant BULK_DAO
    participant DB
end box

' start flow
activate BULK_FULF_HANDLER
group Bulk Fulfil Handler Consume
    TOPIC_BULK_FULFIL <- BULK_FULF_HANDLER: Consume message
    activate TOPIC_BULK_FULFIL
    deactivate TOPIC_BULK_FULFIL

    break
        group Validate Event
            BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: Validate event - Rule:\ntype == 'bulk-fulfil' && action == 'bulk-commit'\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
    end

    group Persist Event Information
        |||
        BULK_FULF_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over BULK_FULF_HANDLER, TOPIC_EVENTS:  Event Handler Consume \n
        |||
    end

    group Validate FSPIOP-Signature
        |||
        ref over BULK_FULF_HANDLER, TOPIC_NOTIFICATION: Validate message.content.headers.**FSPIOP-Signature**\n<color #FF0000><b>Error codes:</b> 3105/3106</color>\n
        |||
    end

    group Validate Bulk Fulfil Transfer
        BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: <color #gray>Schema validation of the incoming message</color>
        BULK_FULF_HANDLER <-> BULK_FULF_HANDLER: <color #gray>Verify the message's signature</color>\n<color #gray>(to be confirmed in future requirement)</color>
        note right of BULK_FULF_HANDLER #lightgrey
            The above validation steps are already handled by the
            Bulk-API-Adapter for the open source implementation.
            It may need to be added in future for custom adapters.
        end note

        group Validate Duplicate Check
            |||
            BULK_FULF_HANDLER -> DB: Request Duplicate Check
            ref over BULK_FULF_HANDLER, DB:  Request Duplicate Check\n
            DB --> BULK_FULF_HANDLER: Return { hasDuplicateId: Boolean, hasDuplicateHash: Boolean }
        end

        alt hasDuplicateId == TRUE && hasDuplicateHash == TRUE
            break
                BULK_FULF_HANDLER -> BULK_DAO: Request to retrieve Bulk Transfer state & completedTimestamp\n<color #FF0000><b>Error code:</b> 2003</color>
                activate BULK_DAO
                BULK_DAO -> DB: Query database
                hnote over DB #lightyellow
                    bulkTransfer
                    bulkTransferFulfilment
                    bulkTransferStateChange
                end note
                activate DB
                BULK_DAO <-- DB: Return resultset
                deactivate DB
                BULK_DAO --> BULK_FULF_HANDLER: Return **bulkTransferStateId** & **completedTimestamp** (not null when completed)
                deactivate BULK_DAO

                note right of BULK_FULF_HANDLER #yellow
                    Message:
                    {
                        id: <messageId>
                        from: <ledgerName>,
                        to: <payeeFspName>,
                        type: application/json
                        content: {
                            headers: <bulkTransferHeaders>,
                            payload: {
                                bulkTransferState: <string>,
                                completedTimestamp: <optional>
                            }
                        },
                        metadata: {
                            event: {
                                id: <uuid>,
                                responseTo: <previous.uuid>,
                                type: "notification",
                                action: "bulk-fulfil-duplicate",
                                createdAt: <timestamp>,
                                state: {
                                    status: "success",
                                    code: 0
                                }
                            }
                        }
                    }
                end note
                BULK_FULF_HANDLER -> TOPIC_NOTIFICATION: Publish Notification event for Payee
                activate TOPIC_NOTIFICATION
                deactivate TOPIC_NOTIFICATION
            end
        else hasDuplicateId == TRUE && hasDuplicateHash == FALSE
            note right of BULK_FULF_HANDLER #yellow
                {
                    id: <messageId>,
                    from: <ledgerName",
                    to: <payeeFspName>,
                    type: "application/json",
                    content: {
                        headers: <bulkTransferHeaders>,
                        payload: {
                            errorInformation: {
                                errorCode: "3106",
                                errorDescription: "Modified request",
                                extensionList: {
                                    extension: [
                                        {
                                            key: "_cause",
                                            value: <FSPIOPError>
                                        }
                                    ]
                                }
                            },
                            uriParams: {
                                id: <bulkTransferId>
                            }
                        }
                    },
                    metadata: {
                        correlationId: <uuid>,
                        event: {
                            id: <uuid>,
                            type: "notification",
                            action: "bulk-commit",
                            createdAt: <timestamp>,
                            state: {
                                status: "error",
                                code: "3106",
                                description: "Modified request"
                            },
                            responseTo: <uuid>
                        }
                    }
                }
            end note
            BULK_FULF_HANDLER -> TOPIC_NOTIFICATION: Publish Notification (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 3106</color>
            activate TOPIC_NOTIFICATION
            deactivate TOPIC_NOTIFICATION
        else hasDuplicateId == FALSE
            alt Validate Bulk Transfer Fulfil (success)
                group Persist Bulk Transfer State (with bulktransferState='PROCESSING')
                    BULK_FULF_HANDLER -> BULK_DAO: Request to persist bulk transfer fulfil\n<color #FF0000><b>Error codes:</b> 2003</color>
                    activate BULK_DAO
                    BULK_DAO -> DB: Persist bulkTransferFulfilment
                    hnote over DB #lightyellow
                        bulkTransferFulfilment
                        bulkTransferStateChange
                        bulkTransferExtension
                    end note
                    activate DB
                    deactivate DB
                    BULK_DAO --> BULK_FULF_HANDLER: Return success
                    deactivate BULK_DAO
                end
            else Validate Bulk Transfer Fulfil (failure)
                group Persist Bulk Transfer State (with bulkTransferState='INVALID/REJECTED')
                    BULK_FULF_HANDLER -> BULK_DAO: Request to persist bulk\ntransfer fulfil failure\n<color #FF0000><b>Error codes:</b> 2003</color>
                    activate BULK_DAO
                    BULK_DAO -> DB: Persist transfer
                    hnote over DB #lightyellow
                        bulkTransferFulfilment
                        bulkTransferStateChange
                        bulkTransferExtension
                        bulkTransferError
                    end note
                    activate DB
                    deactivate DB
                    BULK_DAO --> BULK_FULF_HANDLER: Return success
                    deactivate BULK_DAO
                end
            end
        end
    end
    alt Validate Bulk Transfer Fulfil (success)
        loop for every individual transfer in the bulk fulfil list
            BULK_FULF_HANDLER -> OBJECT_STORE: Retrieve individual transfers from the bulk using\nreference: **MLOS.individualTransferFulfils.messageId**
            activate OBJECT_STORE
            OBJECT_STORE --> BULK_FULF_HANDLER: Stream bulk's individual transfer fulfils
            deactivate OBJECT_STORE

            note right of BULK_FULF_HANDLER #yellow
                Message:
                {
                    id: <messageId>
                    from: <payeeFspName>,
                    to: <payerFspName>,
                    type: "application/json"
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: "fulfil",
                            action: "bulk-commit",
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            BULK_FULF_HANDLER -> TOPIC_TRANSFER_FULFIL: Route & Publish Prepare event to the Payer for the Individual Transfer\n<color #FF0000><b>Error codes:</b> 2003</color>
            activate TOPIC_TRANSFER_FULFIL
            deactivate TOPIC_TRANSFER_FULFIL
        end
    else Validate Bulk Transfer Fulfil (failure)
        note right of BULK_FULF_HANDLER #yellow
            Message:
            {
                id: <messageId>
                from: <ledgerName>,
                to: <payerFspName>,
                type: "application/json"
                content: {
                    headers: <bulkTransferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": <possible codes: [2003, 3100, 3105, 3106, 3202, 3203, 3300, 3301]>
                            "errorDescription": "<refer to section 35.1.3 for description>",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: "notification",
                        action: "bulk-abort",
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        BULK_FULF_HANDLER -> TOPIC_NOTIFICATION: Publish Notification (failure) event for Payer\n<color #FF0000><b>Error codes:</b> 2003</color>
        activate TOPIC_NOTIFICATION
        deactivate TOPIC_NOTIFICATION
    end
end
deactivate BULK_FULF_HANDLER
@enduml

