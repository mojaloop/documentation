/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Miguel de Barros <miguel.debarros@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 1.1.2.b. Position Handler Consume (batch messages)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-transfer-position" as TOPIC_TRANSFER_POSITION
control "Position Event Handler" as POS_HANDLER
collections "Transfer-Topic" as TOPIC_TRANSFERS
entity "Position DAO" as POS_DAO
entity "Event-Topic" as TOPIC_EVENTS
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Transfer DAO" as TRANS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_TRANSFER_POSITION
    participant POS_HANDLER
    participant TOPIC_TRANSFERS
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    participant TRANS_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Position Handler Consume
    TOPIC_TRANSFER_POSITION <- POS_HANDLER: Consume Position event batch of messages for Payer
    activate TOPIC_TRANSFER_POSITION
    deactivate TOPIC_TRANSFER_POSITION

    group Persist Event Information
        |||
        POS_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over POS_HANDLER, TOPIC_EVENTS : Event Handler Consume\n
        |||
    end

    loop for each message in batch
        group Calculate position and persist change
            POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
            activate POS_DAO
            POS_DAO -> DB: Retrieve latest position from DB for Payer
            hnote over DB #lightyellow
                transferPosition
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return latest position
            deactivate POS_DAO

            POS_HANDLER <-> POS_HANDLER: Calculate latest position (lpos) by incrementing transfer for prepare
            POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
            
            POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
            activate POS_DAO
            POS_DAO -> DB: Persist latest position to DB for Payer
            hnote over DB #lightyellow
                transferPosition
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end
        group Persist Transfer State (with transferState='RESERVED' on position check pass)
            POS_HANDLER -> TRANS_DAO: Request to persist batch transfer
            activate TRANS_DAO
            TRANS_DAO -> DB: Persist batch transfer
            hnote over DB #lightyellow
                transferStateChange
            end note
            activate DB
            deactivate DB
            TRANS_DAO --> POS_HANDLER: Return success
            deactivate TRANS_DAO
        end
        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_TRANSFERS: Publish Transfer event
        activate TOPIC_TRANSFERS
        deactivate TOPIC_TRANSFERS
    end
end
deactivate POS_HANDLER
@enduml
