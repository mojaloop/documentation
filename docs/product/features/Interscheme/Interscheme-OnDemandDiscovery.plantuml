@startuml Interscheme-OnDemandDiscovery

title Interscheme - On Demand Discovery

participant "Payer DFSP" as payerDFSP
box "Scheme A" #LightBlue
    participant "ALS\nScheme A" as ALS_A
    participant "Proxy Cache\nScheme A" as pc_A
    participant "Oracle\nScheme A" as Oracle_A
end box
participant "other Proxies" as dfspsA
participant "Proxy AB" as xnp
box "Scheme B" #d1e0c3
    participant "ALS\nScheme B" as ALS_B
    participant "Proxy Cache\nScheme B" as pc_B    
    participant "Oracle\nScheme B" as Oracle_B
end box
participant "Payee DFS" as payeeDFSP

autonumber 1 "<b>[0]"

payerDFSP ->> ALS_A: GET /parties/{Type}/{ID}
note left
 header source = payerDFSP
end note
ALS_A -->> payerDFSP: 202 OK
ALS_A-> Oracle_A: GET /participant/{ID}
alt if not found in Oracle

Oracle_A--> ALS_A: no dfsp found
ALS_A ->> ALS_A: Are there any proxies\n in Scheme A?
  ALS_A ->> ALS_A: Cache Proxies that \nwill receive messages
   note left
     SentToProxies[{ID}] = 
     {['Proxy AB', 'Proxy CD', 'Proxy EF']}
   end note

  loop for all Proxys in Scheme A and not source    
  alt if Proxy AB
    ALS_A ->> xnp: GET /parties/{Type}/{ID}      
    xnp->xnp: Add header
    note left
    fxpiop-proxy = "Proxy AB"
    end note

    xnp ->> ALS_B: GET /parties/{Type}/{ID}
    ALS_B -->> xnp: 202 OK
    xnp -->> ALS_A: 202 OK
    ALS_B -> pc_B: Source not in Scheme: \nfxpiop-proxy = "Proxy AB"\nAdd 'Payer DFSP' to\n 'Proxy AB' mapping
    pc_B -> pc_B: Add new mapping \nto cache
    note left
    Payer DFSP : Proxy AB
    end note        

    ALS_B-> Oracle_B: GET /participant/{ID}
    Oracle_B--> ALS_B: dfps = payeeDFSP
    ALS_B ->> payeeDFSP: GET /parties/{Type}/{ID}  
    payeeDFSP -->> ALS_B: 202 OK
    payeeDFSP ->> ALS_B: PUT /parties/{ID}
    note right
    header desitination = payerDFSP
    source = payeeDFSP
    end note
    ALS_B -->> payeeDFSP: 200 Ok
    ALS_B -> pc_B: Lookup payerDFSP proxy
    ALS_B ->> xnp: PUT /parties/{ID}
    xnp->xnp: Add header
    note left
    fxpiop-proxy = "Proxy AB"
    end note
    
    xnp ->> ALS_A: PUT /parties/{ID}
    ALS_A -->> xnp: 200 OK
    xnp -->> ALS_B: 200 OK
    ALS_A -> pc_A: Source not in Scheme: \nfxpiop-proxy = "Proxy AB"\nAdd 'Payee DFSP' to \n'Proxy AB' mapping
    pc_A -> pc_A: New mapping\nCheck JWS \nsignature &\n Add to cache
    note left
    Payee DFSP : Proxy AB
    end note        
    ALS_A -> Oracle_A: Update Oracle with mapping\n**POST /participants/{Type}/{ID}** \n{{"fspId": "Payee DFSP"}}
    Oracle_A--> ALS_A: return
    ALS_A ->> payerDFSP: PUT /parties/{ID}
    payerDFSP -->> ALS_A: 200 OK
  else if other Proxy in Scheme A
    ALS_A ->> dfspsA: GET /parties/{Type}/{ID}    
    dfspsA -->> ALS_A: 202 OK
    dfspsA ->> ALS_A: PUT /parties/{ID}/error
    ALS_A -->> dfspsA: 200 OK
    ALS_A ->> ALS_A: Mark message as \nreceived from proxy
   note left
     remove other Proxy from 
     list SentToProxies[{ID}]
   end note

    alt if SentToProxies[{ID}] is empty
        ALS_A ->> payerDFSP: PUT /parties/{ID}/error
   note right
     SentToProxies[{ID}] is empty
   end note
        payerDFSP -->> ALS_A: 200 OK
    end
  end  
end loop
else if found in Oracle
  Oracle_A--> ALS_A: dfsp = payeeDFSP

  ALS_A->ALS_A: Payee DFSP is \nnot in scheme A 
  ALS_A-> pc_A: Lookup proxy for\n Payee DFSP
  ALS_A->ALS_A: Add desitation to header 
  note left 
  destination dfsp: Payee DFSP
  end note 

  ALS_A ->> xnp: GET /parties/{Type}/{ID}
  xnp ->> ALS_B: GET /parties/{Type}/{ID} 
  ALS_B -->> xnp: 202 OK
  xnp -->> ALS_A: 202 OK
  ALS_B->ALS_B: Forward to desitination
  ALS_B ->> payeeDFSP: GET /parties/{Type}/{ID}
  payeeDFSP -->> ALS_B: 202 OK
  payeeDFSP ->> ALS_B: PUT /parties/{ID}
  note right
   header desitination = payerDFSP
  end note
  ALS_B -->> payeeDFSP: 200 Ok
  ALS_B -> pc_B: Lookup payerDFSP proxy
  ALS_B ->> xnp: PUT /parties/{ID}
  xnp ->> ALS_A: PUT /parties/{ID}
  ALS_A -->> xnp: 200 OK
  xnp -->> ALS_B: 200 OK
  ALS_A -> pc_A: Source not in Scheme: \nAdd 'Payee DFSP' to\n 'Proxy AB' mapping
  pc_A -> pc_A: Got Mapping
  ALS_A ->> payerDFSP: PUT /parties/{ID}
  payerDFSP -->> ALS_A: 200 OK
end


@enduml