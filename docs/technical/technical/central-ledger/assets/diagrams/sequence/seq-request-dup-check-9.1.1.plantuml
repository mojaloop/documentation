/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 9.1.1. Request Duplicate Check (incl. Transfers, Quotes, Bulk Transfers, Bulk Quotes)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-source" as TOPIC_SOURCE
control "Processing\nHandler" as HANDLER
collections "topic-event" as TOPIC_EVENTS
collections "topic-notifcation" as TOPIC_NOTIFICATION
entity "Request DAO" as DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_SOURCE
    participant HANDLER
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATION
    participant DAO
    participant DB
end box

' start flow
activate HANDLER

group Request Duplicate Check
    TOPIC_SOURCE <- HANDLER: Consume message
    activate TOPIC_SOURCE
    deactivate TOPIC_SOURCE

    HANDLER -> HANDLER: Generate hash: **generatedHash**
    group UUID Check (compareById)
        HANDLER -> DAO: Query hash using getDuplicateDataFuncOverride(id)\n<color #red><b>Error code:</b> 2003</color>
        activate DAO
        note right of DAO #lightgrey
            //request// keyword to be replaced by
            **transfer**, **transferFulfilment**, 
            **bulkTransfer** or other depending 
            on the override
        end note
        DAO -> DB: getDuplicateDataFuncOverride
        hnote over DB #lightyellow
            //request//DuplicateCheck
        end note
        activate DB
        DB --> DAO: Return **duplicateHashRecord**
        deactivate DB
        DAO --> HANDLER: Return **hasDuplicateId**
        deactivate DAO
    end
    
    alt hasDuplicateId == TRUE
        group Hash Check (compareByHash)
            note right of HANDLER #lightgrey
                generatedHash == duplicateHashRecord.hash
            end note
            HANDLER -> HANDLER: Return **hasDuplicateHash**
        end
    else hasDuplicateId == FALSE
        group Store Message Hash
            HANDLER -> DAO: Persist hash using saveHashFuncOverride(id, generatedHash)\n<color #FF0000><b>Error code:</b> 2003</color>
            activate DAO
            DAO -> DB: Persist **generatedHash**
            activate DB
            deactivate DB
            hnote over DB #lightyellow
                //request//DuplicateCheck
            end note
            DAO --> HANDLER: Return success
            deactivate DAO
        end
    end

    note right of HANDLER #yellow
        return {
            hasDuplicateId: Boolean,
            hasDuplicateHash: Boolean
        }
    end note
end

@enduml
