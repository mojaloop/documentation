/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Miguel de Barros <miguel.debarros@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 1.1.2.a. Position Handler Consume (single message)

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-transfer-position" as TOPIC_TRANSFER_POSITION
control "Position Event Handler" as POS_HANDLER
entity "Position DAO" as POS_DAO
collections "Event-Topic" as TOPIC_EVENTS
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant TOPIC_TRANSFER_POSITION
    participant POS_HANDLER
    participant TOPIC_EVENTS
    participant TOPIC_NOTIFICATIONS
    participant POS_DAO
    participant PARTICIPANT_DAO
    participant DB
end box

' start flow
activate POS_HANDLER
group Position Handler Consume
    TOPIC_TRANSFER_POSITION <- POS_HANDLER: Consume Position event message for Payer
    activate TOPIC_TRANSFER_POSITION
    deactivate TOPIC_TRANSFER_POSITION

    break
        group Validate Event
            POS_HANDLER <-> POS_HANDLER: Validate event - Rule: type == 'position' && action == 'prepare'
        end
    end

    group Persist Event Information
        |||
        POS_HANDLER -> TOPIC_EVENTS: Publish event information
        ref over POS_HANDLER, TOPIC_EVENTS :  Event Handler Consume\n
        |||
    end

    alt Calulate & Validate Latest Position (success)
        group Calculate position and persist change
            POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
            activate POS_DAO
            POS_DAO -> DB: Retrieve latest position from DB for Payer
            activate DB
            hnote over DB #lightyellow
                transferPosition
            end note
            DB --> POS_DAO: Retrieve latest position from DB for Payer
            deactivate DB
            POS_DAO --> POS_HANDLER: Return latest position
            deactivate POS_DAO

            POS_HANDLER -> PARTICIPANT_DAO: Request position limits for Payer Participant
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request position limits for Payer Participant
            activate DB
            hnote over DB #lightyellow
                participant
                participantLimit
            end note
            DB --> PARTICIPANT_DAO: Return position limits
            deactivate DB
            deactivate DB
            PARTICIPANT_DAO --> POS_HANDLER: Return position limits
            deactivate PARTICIPANT_DAO

            POS_HANDLER <-> POS_HANDLER: Calculate latest position (lpos) for prepare
            POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
            
            POS_HANDLER -> POS_DAO: Request to persist latest position for Payer
            activate POS_DAO
            POS_DAO -> DB: Persist latest position to DB for Payer
            hnote over DB #lightyellow
                transferPosition
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end

        group Persist Transfer State (with transferState='RESERVED' on position check pass)
            POS_HANDLER -> POS_DAO: Request to persist transfer
            activate POS_DAO
            POS_DAO -> DB: Persist transfer state
            hnote over DB #lightyellow
                transferStateChange
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end

        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <transferMessage.payerFsp>,
                to: <transferMessage.payeeFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: <transferMessage>
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: transfer,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: "success",
                            code: 0
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification event to Payee
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
    else Calculate & Validate Latest Position (failure)
        group Calculate position and persist change
            POS_HANDLER -> POS_DAO: Request latest position from DB for Payer
            activate POS_DAO
            POS_DAO -> DB: Retrieve latest position from DB for Payer
            activate DB
            hnote over DB #lightyellow
                transferPosition
            end note
            DB --> POS_DAO: Retrieve latest position from DB for Payer
            deactivate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return latest position
            deactivate POS_DAO

            POS_HANDLER -> PARTICIPANT_DAO: Request position limits for Payer Participant
            activate PARTICIPANT_DAO
            PARTICIPANT_DAO -> DB: Request position limits for Payer Participant
            activate DB
            hnote over DB #lightyellow
                participant
                participantLimit
            end note
            DB --> PARTICIPANT_DAO: Return position limits
            deactivate DB
            deactivate DB
            PARTICIPANT_DAO --> POS_HANDLER: Return position limits
            deactivate PARTICIPANT_DAO

            POS_HANDLER <-> POS_HANDLER: Calculate latest position (lpos) for prepare
            POS_HANDLER <-> POS_HANDLER: Validate Calculated latest position against the net-debit cap (netcap) - Rule: lpos < netcap
            note right of POS_HANDLER #red: Validation failure!
        end
        
        group Persist Transfer State (with transferState='ABORTED' on position check pass)
            POS_HANDLER -> POS_DAO: Request to persist transfer
            activate POS_DAO
            POS_DAO -> DB: Persist transfer state
            hnote over DB #lightyellow
                transferStateChange
            end note
            activate DB
            deactivate DB
            POS_DAO --> POS_HANDLER: Return success
            deactivate POS_DAO
        end

        note right of POS_HANDLER #yellow
            Message:
            {
                id: <transferMessage.transferId>
                from: <ledgerName>,
                to: <transferMessage.payerFsp>,
                type: application/json
                content: {
                    headers: <transferHeaders>,
                    payload: {
                        "errorInformation": {
                            "errorCode": 4001,
                            "errorDescription": "Payer FSP insufficient liquidity",
                            "extensionList": <transferMessage.extensionList>
                    }
                },
                metadata: {
                    event: {
                        id: <uuid>,
                        responseTo: <previous.uuid>,
                        type: notification,
                        action: prepare,
                        createdAt: <timestamp>,
                        state: {
                            status: 'error',
                            code: <errorInformation.errorCode>
                            description: <errorInformation.errorDescription>
                        }
                    }
                }
            }
        end note
        POS_HANDLER -> TOPIC_NOTIFICATIONS: Publish Notification (failure) event for Payer
        activate TOPIC_NOTIFICATIONS
        deactivate TOPIC_NOTIFICATIONS
        deactivate POS_HANDLER
    end
end
deactivate POS_HANDLER
@enduml
