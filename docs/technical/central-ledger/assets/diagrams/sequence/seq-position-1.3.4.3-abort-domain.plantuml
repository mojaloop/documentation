/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Rajiv Mothilal <rajiv.mothilal@modusbox.com>
 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Sam Kummary <sam@modusbox.com>
 * Vijay Kumar <vijaya.guthi@infitx.com>
 -------------
 ******'/

@startuml
' declate title
title 1.3.4.3. Position Abort Domain

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Abort Domain" as DOMAIN_POSITION_ABORT

' start flow
activate DOMAIN_POSITION_ABORT
rnote right of DOMAIN_POSITION_ABORT #lightblue
    INPUT: bin, accumulatedPosition, transferStateChanges
end note
group Abort Position Batch Processing
    DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: **runningPosition** = accumulatedPosition \n(runningPosition is the current accumulated position of payer)
    loop for each message in the bin
        DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: Validate current state (transferStateChange.transferStateId IN ['RECEIVED_REJECT', 'RECEIVED_ERROR'])\n<color #FF0000><b>Error code:</b> 2001</color>        DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: **runningPosition** = runningPosition - payload.amount.amount
        DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: **runningPosition** = runningPosition + payload.amount.amount
        DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: transferStateChange should be populated and add to **transferStateChanges**
        hnote right of DOMAIN_POSITION_ABORT #lightyellow
            **transferStateChange**: {
                **transferStateId**: (action == 'reject' ? 'ABORTED_REJECTED' : 'ABORTED_ERROR' )
            }
        end note
        DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: participantPositionChange should be populated and add to **participantPositionChanges**
        hnote right of DOMAIN_POSITION_ABORT #lightyellow
            **participantPositionChange**: {
                transferStateChangeId: null, // Need to update this in bin processor while executing queries
                value = runningPosition,
                reservedValue = participantPosition.reservedValue
            }
        end note
        DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: resultMessage should be populated and add to **resultMessages**
        alt action == 'reject'
            rnote right of DOMAIN_POSITION_ABORT #yellow
                **resultMessage**: {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: reject,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0,
                                description: "action successful"
                            }
                        }
                    }
                }
            end note
        else action == 'abort'
            rnote right of DOMAIN_POSITION_ABORT #yellow
                **resultMessage**: {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: abort,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <payload.errorInformation.errorCode || 5000>
                                description: <payload.errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
        end
    end
   
    DOMAIN_POSITION_ABORT -> DOMAIN_POSITION_ABORT: Return the following
    rnote right of DOMAIN_POSITION_ABORT #lightblue
    {
        **accumulatedPosition**: runningPosition,
        **transferStateChanges**,
        **participantPositionChanges**,
        **resultMessages**, (The list of messages to be sent to the kafka topic)
    }
    end note
end
deactivate DOMAIN_POSITION_ABORT
@enduml
