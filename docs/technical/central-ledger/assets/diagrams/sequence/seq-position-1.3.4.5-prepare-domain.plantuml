/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 * Rajiv Mothilal <rajiv.mothilal@modusbox.com>
 * Miguel de Barros <miguel.debarros@modusbox.com>
 * Vijay Kumar Guthi <vijaya.guthi@infitx.com>
 --------------
 ******'/

@startuml
' declate title
title 1.3.4.5. Position Prepare Domain

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistence Store

' declare actors
control "Position Prepare Domain" as DOMAIN_POSITION_PREPARE

' start flow
activate DOMAIN_POSITION_PREPARE
rnote right of DOMAIN_POSITION_PREPARE #lightblue
    INPUT:
        messages,
        accumulatedPositionValue,
        accumulatedPositionReservedValue,
        settlementPositionValue,
        participantLimitValue,
        accumulatedTransferStateChanges
end note
group Prepare Position Batch Processing
    note right of DOMAIN_POSITION_PREPARE #lightgray
       **Note:** The **reservedValue** field in database was used in previous position-prepare batching algorithm.
       That seems unneccesary here as we are doing only calculation and update the position in a database transaction.
    end note
    DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: **effectivePosition** = accumulatedPosition + accumulatedPositionReservedValue
    DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: Calculate **availablePosition** \n(availablePosition is the current accumulated position of payer)
    note right of DOMAIN_POSITION_PREPARE #lightgray
        **availablePosition**
        if settlement model delay is IMMEDIATE
        then:
            settlementPositionValue + participantLimitValue - effectivePosition
        otherwise:
            participantLimitValue - effectivePosition
    end note
    loop for each message in the bin
        DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: Validate current state (transferStateChange.transferStateId == 'RECEIVED_PREPARE')\n<color #FF0000><b>Error code:</b> 2001</color> against failing transfers\nBatch is not rejected as a whole.
        DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: **Liquidity Check** - Validate availablePosition for each transfer (see algorithm below)\n<color #FF0000><b>Error code:</b> 4001</color>

        alt if availablePosition >= payload.amount.amount
            note right of DOMAIN_POSITION_PREPARE #lightgray
                transferStateId = **"RESERVED"**
                availablePosition = availablePosition - preparedTransfer.amount
            end note
            note right of DOMAIN_POSITION_PREPARE #yellow
                resultMessage:
                {
                    id: <transferMessage.transferId>
                    from: <transferMessage.payerFsp>,
                    to: <transferMessage.payeeFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: <transferMessage>
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: transfer,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
        else
            note right of DOMAIN_POSITION_PREPARE #red: Validation failure!
            note right of DOMAIN_POSITION_PREPARE #lightgray
                transferStateId = **"ABORTED"** (This should only be done if not already in a final state (idempotency) ???)
                reason = "4001 - Payer FSP insufficient liquidity"
            end note
            note right of DOMAIN_POSITION_PREPARE #yellow
                resultMessage:
                {
                    id: <transferMessage.transferId>
                    from: <ledgerName>,
                    to: <transferMessage.payerFsp>,
                    type: application/json
                    content: {
                        headers: <transferHeaders>,
                        payload: {
                            "errorInformation": {
                                "errorCode": 4001,
                                "errorDescription": "Payer FSP insufficient liquidity", 
                                "extensionList": <transferMessage.extensionList>
                        }
                    },
                    metadata: {
                        event: {
                            id: <uuid>,
                            responseTo: <previous.uuid>,
                            type: notification,
                            action: prepare,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
        end
        DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: resultMessage should be added to **resultMessages**
        DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: transferStateChange should be populated and add to **transferStateChanges**
        hnote right of DOMAIN_POSITION_PREPARE #lightyellow
            **transferStateChange**: {
                **transferStateId**,
                reason
            }
        end note
        DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: participantPositionChange should be populated and add to **participantPositionChanges**
        hnote right of DOMAIN_POSITION_PREPARE #lightyellow
            **participantPositionChange**: {
                transferStateChangeId: null, // Need to update this in bin processor while executing queries
                value = availablePosition,
                reservedValue = accumulatedPositionReservedValue
            }
        end note

        DOMAIN_POSITION_PREPARE->DOMAIN_POSITION_PREPARE: Assess any limit thresholds on the position\nadding to alarm list if triggered (???)
        note right of DOMAIN_POSITION_PREPARE
            If there are any alarm limits, process those returning limits in which the threshold has been breached
        end note
        
    end

    DOMAIN_POSITION_PREPARE -> DOMAIN_POSITION_PREPARE: Return the following
    rnote right of DOMAIN_POSITION_PREPARE #lightblue
    {
        **accumulatedPosition**: availablePosition,
        **transferStateChanges**,
        **participantPositionChanges**,
        **resultMessages**, (The list of messages to be sent to the kafka topic)
    }
    end note
    deactivate DOMAIN_POSITION_PREPARE

end

@enduml
