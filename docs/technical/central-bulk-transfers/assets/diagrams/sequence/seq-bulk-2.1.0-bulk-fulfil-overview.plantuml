/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 2.1.0. DFSP2 sends a Bulk Fulfil Success Transfer request

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
actor "DFSP1\nPayer" as DFSP1
actor "DFSP2\nPayee" as DFSP2
boundary "ML API Adapter" as MLAPI
control "ML API \nNotification Handler" as NOTIFY_HANDLER
collections "mongo-\nobject-store" as OBJECT_STORE
boundary "Central Service API" as CSAPI
collections "topic-\nbulk-fulfil" as TOPIC_BULK_FULFIL
control "Bulk Fulfil\nHandler" as BULK_FULFIL_HANDLER
collections "topic-\nfulfil" as TOPIC_FULFIL
control "Fulfil \nHandler" as FULF_HANDLER
collections "topic-\ntransfer-position" as TOPIC_TRANSFER_POSITION
control "Position \nHandler" as POS_HANDLER
collections "topic-\nbulk-processing" as TOPIC_BULK_PROCESSING
control "Bulk Processing\nHandler" as BULK_PROC_HANDLER
collections "topic-\nnotification" as TOPIC_NOTIFICATIONS

box "Financial Service Providers" #lightGray
	participant DFSP1
	participant DFSP2
end box

box "ML API Adapter Service" #LightBlue
	participant MLAPI
	participant NOTIFY_HANDLER
end box

box "Central Service" #LightYellow
    participant OBJECT_STORE
    participant CSAPI
    participant TOPIC_BULK_FULFIL
    participant BULK_FULFIL_HANDLER
	participant TOPIC_FULFIL
    participant FULF_HANDLER
    participant TOPIC_TRANSFER_POSITION
    participant POS_HANDLER
    participant TOPIC_BULK_PROCESSING
    participant BULK_PROC_HANDLER
    participant TOPIC_NOTIFICATIONS
end box

' start flow
activate NOTIFY_HANDLER
activate BULK_FULFIL_HANDLER
activate FULF_HANDLER
activate POS_HANDLER
activate BULK_PROC_HANDLER
group DFSP2 sends a Bulk Fulfil Success Transfer request to DFSP1
    note right of DFSP2 #yellow
        Headers - transferHeaders: {
            Content-Length: <int>,
            Content-Type: <string>,
            Date: <date>,
            FSPIOP-Source: <string>,
            FSPIOP-Destination: <string>,
            FSPIOP-Encryption: <string>,
            FSPIOP-Signature: <string>,
            FSPIOP-URI: <uri>,
            FSPIOP-HTTP-Method: <string>
        }

        Payload - bulkTransferMessage:
        {
            bulkTransferState: <bulkTransferState>,
            completedTimestamp: <completedTimeStamp>,
            individualTransferResults: 
            [
                {
                    transferId: <uuid>, 
                    fulfilment: <ilpCondition>,
                    extensionList: { extension: [ 
                        { key: <string>, value: <string> }
                    ] }
                }
            ],
            extensionList: { extension: [ 
                { key: <string>, value: <string> }
            ] }
        }
    end note
    DFSP2 ->> MLAPI: PUT - /bulkTransfers/<ID>
    activate MLAPI
    MLAPI -> MLAPI: Validate incoming message\n<color #FF0000><b>Error codes:</b> 3000-3002, 3100-3107</color>
    MLAPI -> OBJECT_STORE: Persist incoming bulk message to\nobject store: **MLOS.individualTransferFulfils**
    activate OBJECT_STORE
    OBJECT_STORE --> MLAPI: Return messageId reference to the stored object(s)
    deactivate OBJECT_STORE
    note right of MLAPI #yellow
        Message:
        {
            id: <messageId>,
            from: <payeeFspName>,
            to: <payerFspName>,
            type: "application/json",
            content: {
                headers: <bulkTransferHeaders>,
                payload: {
                    bulkTransferId: <uuid>,
                    bulkTransferState: "COMPLETED",
                    completedTimestamp: <timestamp>,
                    extensionList: { extension: [ 
                        { key: <string>, value: <string> } 
                    ] },
                    count: <int>,
                    hash: <string>
                }
            },
            metadata: {
                event: {
                    id: <uuid>,
                    type: "bulk-fulfil",
                    action: "bulk-commit",
                    createdAt: <timestamp>,
                    state: {
                        status: "success",
                        code: 0
                    }
                }
            }
        }
    end note
    MLAPI -> TOPIC_BULK_FULFIL: Route & Publish Bulk Fulfil event for Payee\n<color #FF0000><b>Error code:</b> 2003</color>
    activate TOPIC_BULK_FULFIL
    TOPIC_BULK_FULFIL <-> TOPIC_BULK_FULFIL: Ensure event is replicated \nas configured (ACKS=all)\n<color #FF0000><b>Error code:</b> 2003</color>
    TOPIC_BULK_FULFIL --> MLAPI: Respond replication acknowledgements \nhave been received
    deactivate TOPIC_BULK_FULFIL
    MLAPI -->> DFSP2: Respond HTTP - 200 (OK)
    deactivate MLAPI
    TOPIC_BULK_FULFIL <- BULK_FULFIL_HANDLER: Consume message
    BULK_FULFIL_HANDLER -> OBJECT_STORE: Retrieve individual transfers by key:\n**MLOS.individualTransferFulfils.messageId**
    activate OBJECT_STORE
    OBJECT_STORE --> BULK_FULFIL_HANDLER: Stream bulk's individual transfers
    deactivate OBJECT_STORE
    ref over  TOPIC_BULK_FULFIL, TOPIC_FULFIL:  Bulk Prepare Handler Consume \n
    alt Success
        BULK_FULFIL_HANDLER -> TOPIC_FULFIL: Produce (stream) single transfer message\nfor each individual transfer [loop]
    else Failure
        BULK_FULFIL_HANDLER --> TOPIC_NOTIFICATIONS: Produce single message for the entire bulk
    end
    |||
    TOPIC_FULFIL <- FULF_HANDLER: Consume message
    ref over TOPIC_FULFIL, TOPIC_TRANSFER_POSITION: Fulfil Handler Consume (Success)\n
    alt Success
        FULF_HANDLER -> TOPIC_TRANSFER_POSITION: Produce message
    else Failure
        FULF_HANDLER --> TOPIC_BULK_PROCESSING: Produce message
    end
    |||
    TOPIC_TRANSFER_POSITION <- POS_HANDLER: Consume message
    ref over TOPIC_TRANSFER_POSITION, TOPIC_BULK_PROCESSING: Position Handler Consume (Success)\n
    POS_HANDLER -> TOPIC_BULK_PROCESSING: Produce message
    |||
    TOPIC_BULK_PROCESSING <- BULK_PROC_HANDLER: Consume message
    ref over TOPIC_BULK_PROCESSING, TOPIC_NOTIFICATIONS: Bulk Processing Handler Consume (Success)\n
    BULK_PROC_HANDLER -> OBJECT_STORE:  Persist bulk message by destination to the\nobject store: **MLOS.bulkTransferResults**
    activate OBJECT_STORE
    OBJECT_STORE --> BULK_PROC_HANDLER: Return the reference to the stored \nnotification object(s): **messageId**
    deactivate OBJECT_STORE
    BULK_PROC_HANDLER -> TOPIC_NOTIFICATIONS: Send Bulk Commit notification
    |||
    TOPIC_NOTIFICATIONS <- NOTIFY_HANDLER: Consume message
    NOTIFY_HANDLER -> OBJECT_STORE: Retrieve bulk notification(s) by reference & destination:\n**MLOS.bulkTransferResults.messageId + destination**
    activate OBJECT_STORE
    OBJECT_STORE --> NOTIFY_HANDLER: Return notification payload
    deactivate OBJECT_STORE
    opt action == 'bulk-commit'
        |||
        ref over DFSP1, TOPIC_NOTIFICATIONS: Send notification to Participant (Payer)\n
        NOTIFY_HANDLER -> DFSP1: Send callback notification
    end
    |||
    TOPIC_NOTIFICATIONS <- NOTIFY_HANDLER: Consume message
    NOTIFY_HANDLER -> OBJECT_STORE: Retrieve bulk notification(s) by reference & destination:\n**MLOS.bulkTransferResults.messageId + destination**
    activate OBJECT_STORE
    OBJECT_STORE --> NOTIFY_HANDLER: Return notification payload
    deactivate OBJECT_STORE
    opt action == 'bulk-commit'
        |||
        ref over DFSP2, TOPIC_NOTIFICATIONS: Send notification to Participant (Payee)\n
        NOTIFY_HANDLER -> DFSP2: Send callback notification
    end
    |||
end
deactivate POS_HANDLER
activate BULK_FULFIL_HANDLER
deactivate FULF_HANDLER
deactivate BULK_PROC_HANDLER
deactivate NOTIFY_HANDLER
@enduml
